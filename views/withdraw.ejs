<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <title>Glacis || Withdrawals</title>
    <meta name="description" content="Glacis offers an online earning platform where users make money by inviting others, helping verify new users, selling ebooks, advertising, and more.">
    <meta property="og:title" content="Glacis">
    <meta property="og:description" content="Join Glacis to earn money through various online opportunities including referrals, verifications, and advertising.">
    <meta property="og:image" content="/images/glacis-logo.jpg">
    <meta property="og:url" content="https://glacis.antocapteknologies.com">

    <!-- Use only one Font Awesome import -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
    
    <!-- Favicon -->
    <link rel="icon" href="/images/glacis-logo.jpg" type="image/x-icon">
    
    <!-- Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
</head>

    <script type="module">
        import { ensureAuthenticated } from "./script.js";
        
        document.addEventListener("DOMContentLoaded", () => {
            ensureAuthenticated(); 
        });
    </script>   
 
 <!-- Header -->
<header class="flex flex-col bg-gradient-to-r from-gray-900 via-gray-800 to-gray-100 shadow-lg fixed w-full top-0 z-50 border-b border-gray-300 h-28 px-6">
 
    <!-- Top Section with Icons (Hidden on Small Screens) -->
    <div class="hidden lg:flex items-center space-x-4 bg-white shadow-md rounded-full border border-gray-300 px-4 py-2 w-fit absolute right-6 top-0 mb-4">
        <button id="theme-toggle" class="text-yellow-500 text-xl hover:text-yellow-600 transition">
            <i class="fas fa-moon"></i>
        </button>
        <button id="language-toggle" class="text-blue-500 text-xl hover:text-blue-600 transition">
            <i class="fas fa-language"></i>
        </button>
        <button id="notification-bar" class="relative text-green-500 text-xl hover:text-green-600 transition">
            <i class="fas fa-bell"></i>
            <span class="absolute -top-1 -right-1 bg-red-600 text-white text-xs w-4 h-4 flex items-center justify-center rounded-full">3</span>
        </button>
    </div>
    
    
        <!-- Main Header Section -->
        <div class="flex items-center justify-between py-1">
            <a href="/dashboard" class="flex items-center space-x-3">
                <img id="logo" src="images/quantum-market-logo.jpg" alt="Logo" class="h-20 w-20 rounded-full shadow-md">                         
            </a>
    
           <!-- Desktop Navigation -->
    <nav class="hidden lg:flex space-x-8 bg-white px-10 py-3 shadow-md rounded-full border border-gray-300 mt-10">
        <a href="dashboard" class="text-gray-900 font-semibold hover:text-blue-500 transition duration-300">Dashboard</a>
        <a href="earnings" class="text-gray-900 font-semibold hover:text-blue-500 transition duration-300">Earnings</a>
        <a href="validator" class="text-gray-900 font-semibold hover:text-blue-500 transition duration-300">Validator</a>
        <a href="referral" class="text-gray-900 font-semibold hover:text-blue-500 transition duration-300">Referrals</a>
        <a href="withdraw" class="text-gray-900 font-semibold hover:text-blue-500 transition duration-300">Withdraw</a>
        <a href="videos" class="text-gray-900 font-semibold hover:text-blue-500 transition duration-300">Videos</a>
        <a href="help" class="text-gray-900 font-semibold hover:text-blue-500 transition duration-300">Help</a>
        <a href="profile" class="text-gray-900 font-semibold hover:text-blue-500 transition duration-300">Profile</a>
        <button id="logout-button" class="text-red-500 font-semibold hover:text-red-700 transition duration-300">Log Out</button>
    </nav>
    
    
            <!-- Mobile Navigation Icon -->
            <button id="hamburger-icon" class="text-gray-900 text-2xl lg:hidden">
                <i class="fas fa-bars"></i>
            </button>
        </div>
    </header>
    
    <!-- Overlay -->
    <div id="overlay" class="fixed inset-0 bg-black bg-opacity-30 hidden lg:hidden"></div>
    
    <!-- Mobile Navigation -->
    <nav id="mobile-nav" class="fixed left-0 top-0 h-full w-3/4 bg-white text-gray-900 shadow-2xl transform -translate-x-full transition-transform lg:hidden z-50 rounded-r-2xl">
        <div class="p-6 border-b flex justify-between items-center">
            <h3 class="text-xl font-semibold">Menu</h3>
            <button id="close-nav" class="text-gray-700 text-2xl"><i class="fas fa-times"></i></button>
        </div>
        <div class="p-6 flex flex-col space-y-4 text-lg">
            <a href="dashboard" class="flex items-center space-x-3 hover:text-blue-500">
                <i class="fas fa-tachometer-alt"></i><span>Dashboard</span>
            </a>
            <a href="earnings" class="flex items-center space-x-3 hover:text-blue-500">
                <i class="fas fa-dollar-sign"></i><span>Earnings</span>
            </a>
            <a href="validator" class="flex items-center space-x-3 hover:text-blue-500">
                <i class="fas fa-user-check"></i><span>Validator</span>
            </a>
            <a href="referral" class="flex items-center space-x-3 hover:text-blue-500">
                <i class="fas fa-user-friends"></i><span>Referrals</span>
            </a>
            <a href="withdraw" class="flex items-center space-x-3 hover:text-blue-500">
                <i class="fas fa-wallet"></i><span>Withdraw</span>
            </a>
            <a href="videos" class="flex items-center space-x-3 hover:text-blue-500">
                <i class="fas fa-info-circle"></i><span>Videos</span>
            </a>
            <a href="help" class="flex items-center space-x-3 hover:text-blue-500">
                <i class="fas fa-question-circle"></i><span>Help</span>
            </a>
            <a href="profile" class="flex items-center space-x-3 hover:text-blue-500">
                <i class="fas fa-user"></i><span>Profile</span>
            </a>
            <button id="logout-button" class="flex items-center space-x-3 text-red-500 hover:text-red-700">
                <i class="fas fa-sign-out-alt"></i><span>Log Out</span>
            </button>
        </div>
        
        <!-- Mobile Icons Section (Now inside the menu for small screens) -->
        <div class="p-6 border-t flex justify-around text-gray-700 text-xl bg-white shadow-md rounded-b-2xl">
            <button id="theme-toggle" class="text-yellow-500 hover:text-yellow-600 transition">
                <i class="fas fa-moon"></i>
            </button>
            <button id="language-toggle" class="text-blue-500 hover:text-blue-600 transition">
                <i class="fas fa-language"></i>
            </button>
            <button id="notification-bar" class="relative text-green-500 hover:text-green-600 transition">
                <i class="fas fa-bell"></i>
                <span class="absolute -top-1 -right-1 bg-red-600 text-white text-xs w-4 h-4 flex items-center justify-center rounded-full">3</span>
            </button>
        </div>
    </nav>

<body class="bg-gray-100 font-sans mt-20">
    <section id="withdrawal" class="p-6 bg-gray-100 min-h-screen">
        <!-- Withdrawal Page Title -->
        <div class="bg-gradient-to-r from-gray-900 via-gray-800 to-gray-900 shadow-2xl rounded-2xl p-8 mb-8 text-center">
            <h2 class="text-3xl text-white font-extrabold tracking-wide uppercase py-4 shadow-lg rounded-xl 
                       bg-gradient-to-r from-yellow-500 to-orange-600 inline-block px-6">
                Withdrawal
            </h2>
        </div>
    
        <!-- Withdrawal Summary -->
        <div class="bg-white shadow-lg rounded-lg p-6 mb-6">
            <h3 class="text-lg font-semibold text-gray-800 mb-4">Withdrawal Summary</h3>
            <div class="grid grid-cols-1 md:grid-cols-3 gap-6 text-center">
                <div class="bg-blue-100 p-4 rounded-lg">
                    <h4 class="text-lg font-semibold text-gray-700">Total Balance</h4>
                    <p id="total-balance" class="text-2xl font-bold text-blue-700">$0</p>
                </div>
                <div class="bg-yellow-100 p-4 rounded-lg">
                    <h4 class="text-lg font-semibold text-gray-700">Pending Withdrawals</h4>
                    <p id="pending-withdrawals" class="text-2xl font-bold text-yellow-700">$0</p>
                </div>
                <div class="bg-green-100 p-4 rounded-lg">
                    <h4 class="text-lg font-semibold text-gray-700">Minimum Withdrawal</h4>
                    <p id="minimum-withdrawal" class="text-2xl font-bold text-green-700">$1</p>
                </div>
            </div>
        </div>
    
        <!-- Withdrawal Request Form -->
        <div class="bg-white shadow-lg rounded-lg p-6">
            <h3 class="text-lg font-semibold text-gray-800 mb-4">Withdrawal Request</h3>
            <form id="withdrawal-form">
                <label class="block text-gray-700 font-medium mb-2">Amount to Withdraw</label>
                <input type="number" id="withdraw-amount" placeholder="Enter amount" 
                       class="w-full px-3 py-2 border rounded-lg mb-4 text-gray-600">
                
                <label class="block text-gray-700 font-medium mb-2">Wallet Address</label>
                <input type="text" id="wallet-address" placeholder="Your Wallet Address" 
                       class="w-full px-3 py-2 border rounded-lg mb-4 text-gray-600">
    
                <button type="submit" class="w-full bg-yellow-500 text-white py-2 rounded-lg 
                                          hover:bg-yellow-600 transition">
                    Submit Withdrawal
                </button>
            </form>
        </div>
    
        <!-- Withdrawal History -->
        <div class="bg-white shadow-lg rounded-lg p-6 mt-8">
            <h3 class="text-lg font-semibold text-gray-800 mb-4">Withdrawal History</h3>
            <table class="w-full border-collapse border border-gray-300">
                <thead>
                    <tr class="bg-gray-200">
                        <th class="p-3 border">Date</th>
                        <th class="p-3 border">Amount</th>
                        <th class="p-3 border">Status</th>
                    </tr>
                </thead>
                <tbody id="withdrawal-history-body">
                    <!-- Withdrawal history will be dynamically inserted here -->
                </tbody>
            </table>
        </div>
    
        <!-- Withdrawal Rules -->
        <div class="bg-yellow-100 p-4 rounded-lg mt-6 text-gray-800">
            <h4 class="font-semibold mb-2">Withdrawal Rules</h4>
            <ul class="list-disc list-inside">
                <li>Withdrawals are processed within <span class="font-bold">24 hours</span>.</li>
                <li>No refunds once payment is made.</li>
                <li>Ensure the correct wallet address is used.</li>
            </ul>
        </div>
    </section>

<!-- Admin Panel (Visible Only to Admin) -->
<div id="admin-panel" class="bg-white shadow-lg rounded-lg p-6 mt-8 hidden">
    <h3 class="text-lg font-semibold text-gray-800 mb-4">Admin Panel - Approve Withdrawals</h3>

    <!-- Responsive Wrapper -->
    <div class="overflow-x-auto w-full">
        <table class="w-full min-w-[600px] border-collapse border border-gray-300">
            <thead>
                <tr class="bg-gray-200">
                    <th class="p-3 border">User Email</th>
                    <th class="p-3 border">Amount</th>
                    <th class="p-3 border">Wallet Address</th>
                    <th class="p-3 border">Actions</th>
                </tr>
            </thead>
            <tbody id="admin-withdrawals-body">
                <!-- Withdrawal requests will be added here dynamically -->
            </tbody>
        </table>
    </div>
</div>

    
<script type="module">
    import { auth, db, doc, getDoc, collection, getDocs, addDoc, onAuthStateChanged, runTransaction, deleteDoc, updateDoc } from "./script.js"; // Import Firestore utilities

    //const db = getFirestore();

async function loadWithdrawalData() {
    const user = auth.currentUser;
    if (!user) {
        console.warn("No authenticated user.");
        return;
    }

    try {
        const userRef = doc(db, "users", user.uid);
        const userSnap = await getDoc(userRef);

        if (userSnap.exists()) {
            const userData = userSnap.data();
            console.log("User Data:", userData); // Debugging: Check retrieved data

            // Fetch earnings data from Firestore
            const totalEarnings = userData.totalEarnings || 0;
            const referralEarnings = userData.referralEarnings || 0;
            const pendingWithdrawals = userData.pendingWithdrawals || 0; // Ensure this field exists in Firestore
            const minimumWithdrawal = 1; // Set minimum withdrawal amount

            // Compute total balance
            const totalBalance = totalEarnings + referralEarnings;

            console.log("Total Balance:", totalBalance);
            console.log("Pending Withdrawals:", pendingWithdrawals);

            // Update UI
            document.getElementById("total-balance").textContent = `$${totalBalance.toFixed(2)}`;
            document.getElementById("pending-withdrawals").textContent = `$${pendingWithdrawals.toFixed(2)}`;
            document.getElementById("minimum-withdrawal").textContent = `$${minimumWithdrawal.toFixed(2)}`;

            // Load withdrawal history
            loadWithdrawalHistory(user.uid);
         // Check if the logged-in user is admin
         checkIfAdmin(user.email);
        } else {
            console.warn("User document not found in Firestore.");
        }
    } catch (error) {
        console.error("Error fetching withdrawal data:", error);
    }
}
// SUBMISSION OF WITHDRAWAL
async function submitWithdrawal(event) {
    event.preventDefault();

    const user = auth.currentUser;
    if (!user) {
        console.warn("No authenticated user.");
        return;
    }

    const amountInput = document.getElementById("withdraw-amount");
    const walletInput = document.getElementById("wallet-address");

    const amount = parseFloat(amountInput.value);
    const walletAddress = walletInput.value.trim();

    if (isNaN(amount) || amount <= 0) {
        alert("Please enter a valid withdrawal amount.");
        return;
    }

    // Reference to the user document
    const userRef = doc(db, "users", user.uid);

    try {
        // Use Firestore transaction to update balance safely
        await runTransaction(db, async (transaction) => {
            const userSnap = await transaction.get(userRef);
            if (!userSnap.exists()) {
                throw new Error("User data not found.");
            }

            const userData = userSnap.data();
            const totalEarnings = userData.totalEarnings || 0;
            const pendingWithdrawals = userData.pendingWithdrawals || 0;
            const minimumWithdrawal = 1;

            if (amount > totalEarnings) {
                throw new Error("Insufficient balance for withdrawal.");
            }

            if (amount < minimumWithdrawal) {
                throw new Error(`Minimum withdrawal amount is $${minimumWithdrawal}.`);
            }

            if (!walletAddress) {
                throw new Error("Please enter a valid wallet address.");
            }

            // Update Firestore: Deduct from totalEarnings and increase pendingWithdrawals
            transaction.update(userRef, {
                totalEarnings: totalEarnings - amount,
                pendingWithdrawals: pendingWithdrawals + amount
            });

            // Save withdrawal request to Firestore
            const withdrawalsRef = collection(db, "withdrawals");
            await addDoc(withdrawalsRef, {
                userId: user.uid,
                amount: amount,
                walletAddress: walletAddress,
                status: "Pending",
                requestedAt: new Date().toISOString(),
            });
        });

        alert("Withdrawal request submitted successfully!");
        amountInput.value = "";
        walletInput.value = "";

        // Refresh UI with updated balances
        loadWithdrawalData();
    } catch (error) {
        console.error("Error submitting withdrawal request:", error);
        alert(error.message || "Error processing your withdrawal. Please try again.");
    }
}

// Function to load withdrawal history
async function loadWithdrawalHistory(userId) {
    try {
        const withdrawalsRef = collection(db, "withdrawals");
        const withdrawalsSnap = await getDocs(withdrawalsRef);

        const withdrawalTableBody = document.getElementById("withdrawal-history-body");
        withdrawalTableBody.innerHTML = ""; // Clear previous history

        withdrawalsSnap.forEach((doc) => {
            const data = doc.data();
            if (data.userId === userId) {
                const row = `
                    <tr class="text-center">
                        <td class="p-3 border">${new Date(data.requestedAt).toLocaleDateString()}</td>
                        <td class="p-3 border">$${data.amount.toFixed(2)}</td>
                        <td class="p-3 border ${data.status === "Approved" ? "text-green-600" : data.status === "Rejected" ? "text-red-600" : "text-yellow-600"}">
                            ${data.status}
                        </td>
                    </tr>
                `;
                withdrawalTableBody.innerHTML += row;
            }
        });
    } catch (error) {
        console.error("Error fetching withdrawal history:", error);
    }
}

// Ensure withdrawal data loads when the user logs in
onAuthStateChanged(auth, (user) => {
    if (user) {
        console.log("User authenticated:", user.uid);
        loadWithdrawalData();
    } else {
        console.warn("User not logged in.");
    }
});

// Attach form submission event listener
document.getElementById("withdrawal-form").addEventListener("submit", submitWithdrawal);

// Function to check if user is an admin
function checkIfAdmin(email) {
    if (email === "marketquantum25@gmail.com") {
        document.getElementById("admin-panel").classList.remove("hidden");
        loadPendingWithdrawals();
    }
}

// Load pending withdrawals for the admin
async function loadPendingWithdrawals() {
    try {
        const withdrawalsRef = collection(db, "withdrawals");
        const withdrawalsSnap = await getDocs(withdrawalsRef);
        const adminTableBody = document.getElementById("admin-withdrawals-body");
        adminTableBody.innerHTML = ""; // Clear the table before adding new entries

        for (const docSnap of withdrawalsSnap.docs) {
            const data = docSnap.data();
            if (data.status === "Pending") {
                let userEmail = "Unknown"; // Default value

                // Fetch user email using userId
                if (data.userId) {
                    const userRef = doc(db, "users", data.userId);
                    const userSnap = await getDoc(userRef);
                    if (userSnap.exists()) {
                        userEmail = userSnap.data().email || "Unknown";
                    }
                }

                // Append the row dynamically
                const row = `
                    <tr class="text-center">
                        <td class="p-3 border">${userEmail}</td>
                        <td class="p-3 border">$${data.amount.toFixed(2)}</td>
                        <td class="p-3 border">${data.walletAddress}</td>
                        <td class="p-3 border">
                            <button onclick="approveWithdrawal('${docSnap.id}', '${data.userId}', ${data.amount})" 
                                class="bg-green-500 text-white px-3 py-1 rounded-lg mr-2">Approve</button>
                            <button onclick="rejectWithdrawal('${docSnap.id}', '${data.userId}', ${data.amount})" 
                                class="bg-red-500 text-white px-3 py-1 rounded-lg">Reject</button>
                        </td>
                    </tr>
                `;
                adminTableBody.innerHTML += row;
            }
        }
    } catch (error) {
        console.error("Error loading pending withdrawals:", error);
    }
}

// Approve withdrawal
async function approveWithdrawal(withdrawalId, userId, amount) {
    try {
        const withdrawalRef = doc(db, "withdrawals", withdrawalId);
        const userRef = doc(db, "users", userId);
        const userSnap = await getDoc(userRef);

        if (!userSnap.exists()) {
            console.warn("User not found.");
            return;
        }

        const userData = userSnap.data();
        const pendingWithdrawals = userData.pendingWithdrawals || 0;

        // Ensure Firestore transaction updates correctly
        await updateDoc(userRef, {
            pendingWithdrawals: Math.max(0, pendingWithdrawals - amount) // Prevent negative values
        });

        // Update withdrawal request status
        await updateDoc(withdrawalRef, {
            status: "Approved",
            adminProcessedBy: auth.currentUser.email,
            processedAt: new Date().toISOString()
        });

        alert("Withdrawal approved successfully!");
        loadPendingWithdrawals(); // Refresh admin panel
        loadWithdrawalData(); // Refresh user data
    } catch (error) {
        console.error("Error approving withdrawal:", error);
        alert("Error processing approval. Try again.");
    }
}

// Reject withdrawal
async function rejectWithdrawal(withdrawalId, userId, amount) {
    try {
        const withdrawalRef = doc(db, "withdrawals", withdrawalId);
        const userRef = doc(db, "users", userId);
        const userSnap = await getDoc(userRef);

        if (!userSnap.exists()) {
            console.warn("User not found.");
            return;
        }

        const userData = userSnap.data();
        const totalEarnings = userData.totalEarnings || 0;
        const pendingWithdrawals = userData.pendingWithdrawals || 0;

        // Refund rejected withdrawal back to total earnings
        await updateDoc(userRef, {
            totalEarnings: totalEarnings + amount,
            pendingWithdrawals: Math.max(0, pendingWithdrawals - amount) // Prevent negative values
        });

        // Mark withdrawal as rejected
        await updateDoc(withdrawalRef, {
            status: "Rejected",
            adminProcessedBy: auth.currentUser.email,
            processedAt: new Date().toISOString()
        });

        alert("Withdrawal rejected successfully!");
        loadPendingWithdrawals(); // Refresh admin panel
        loadWithdrawalData(); // Refresh user data
    } catch (error) {
        console.error("Error rejecting withdrawal:", error);
        alert("Error processing rejection. Try again.");
    }
}


// Ensure data loads on auth state change
onAuthStateChanged(auth, (user) => {
    if (user) {
        loadWithdrawalData();
    } else {
        console.warn("User not logged in.");
    }
});

// Make functions globally accessible for onclick events
window.approveWithdrawal = approveWithdrawal;
window.rejectWithdrawal = rejectWithdrawal;

</script>

<footer class="bg-gray-900 text-white text-center py-4">
    <p class="copyright-text text-sm">
        &copy; 2025 <span class="font-bold">Quantum Market</span>. All rights reserved.
    </p>
    <p class="text-xs mt-1">
        Designed by 
        <a href="https://antocapteknologies.com" class="text-blue-400 hover:text-blue-300 font-semibold" target="_blank">
            Antocap Teknologies
        </a>
    </p>
</footer>    
  
<script type ="module" src="https://www.gstatic.com/firebasejs/11.4.0/firebase-app.js"></script>
<script type ="module" src="https://www.gstatic.com/firebasejs/11.4.0/firebase-analytics.js"></script>
<script type ="module" src="https://www.gstatic.com/firebasejs/11.4.0/firebase-auth.js"></script>
<script type ="module" src="https://www.gstatic.com/firebasejs/11.4.0/firebase-firestore.js"></script>
<script type ="module" src="https://www.gstatic.com/firebasejs/11.4.0/firebase-storage.js"></script>

<!-- Your custom script -->
<script type="module" src="script.js"></script>
<script type="module" src="referral.js"></script>

  <script>

document.addEventListener("contextmenu", function (event) {
    event.preventDefault(); // Disable right-click
  });

  document.addEventListener("keydown", function (event) {
    if (event.ctrlKey && (event.key === "u" || event.key === "U")) {
      event.preventDefault(); // Disable "View Source" (Ctrl + U)
    }
    if (event.ctrlKey && event.shiftKey && event.key === "I") {
      event.preventDefault(); // Disable DevTools (Ctrl + Shift + I)
    }
    if (event.ctrlKey && event.shiftKey && event.key === "J") {
      event.preventDefault(); // Disable DevTools (Ctrl + Shift + J)
    }
    if (event.ctrlKey && event.key === "S") {
      event.preventDefault(); // Disable Save (Ctrl + S)
    }
    if (event.ctrlKey && event.key === "P") {
      event.preventDefault(); // Disable Print (Ctrl + P)
    }
  });


</script>
</body>
</html>
