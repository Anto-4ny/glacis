<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <title>Quantum Market || Dashboard</title>
    <meta name="description" content="Quantum Market offers an online earning platform where users make money by inviting others, helping verify new users, selling ebooks, advertising, and more.">
    <meta property="og:title" content="Quantum Market">
    <meta property="og:description" content="Join Quantum Market to earn money through various online opportunities including referrals, verifications, and advertising.">
    <meta property="og:image" content="images/quantum-market-logo.jpg">
    <meta property="og:url" content="https://quatummarket.antocapteknologies.com">

    <!-- Use only one Font Awesome import -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
    
    <!-- Favicon -->
    <link rel="icon" href="images/quantum-market-logo.jpg" type="image/x-icon">
    
    <!-- Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Chart.js CDN (Load this in the <head> or before your script) -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

</head>

<!-- Header -->
<header class="flex flex-col bg-gradient-to-r from-gray-900 via-gray-800 to-gray-100 shadow-lg fixed w-full top-0 z-50 border-b border-gray-300 h-28 px-6">
 
<!-- Top Section with Icons (Hidden on Small Screens) -->
<div class="hidden lg:flex items-center space-x-4 bg-white shadow-md rounded-full border border-gray-300 px-4 py-2 w-fit absolute right-6 top-0 mb-4">
    <button id="theme-toggle" class="text-yellow-500 text-xl hover:text-yellow-600 transition">
        <i class="fas fa-moon"></i>
    </button>
    <button id="language-toggle" class="text-blue-500 text-xl hover:text-blue-600 transition">
        <i class="fas fa-language"></i>
    </button>
    <button id="notification-bar" class="relative text-green-500 text-xl hover:text-green-600 transition">
        <i class="fas fa-bell"></i>
        <span class="absolute -top-1 -right-1 bg-red-600 text-white text-xs w-4 h-4 flex items-center justify-center rounded-full">0</span>
    </button>
</div>


    <!-- Main Header Section -->
    <div class="flex items-center justify-between py-1">
        <a href="/dashboard" class="flex items-center space-x-3">
            <img id="logo" src="images/quantum-market-logo.jpg" alt="Logo" class="h-20 w-20 rounded-full shadow-md">                         
        </a>

       <!-- Desktop Navigation -->
<nav class="hidden lg:flex space-x-8 bg-white px-10 py-3 shadow-md rounded-full border border-gray-300 mt-10">
    <a href="dashboard" class="text-gray-900 font-semibold hover:text-blue-500 transition duration-300">Dashboard</a>
    <a href="earnings" class="text-gray-900 font-semibold hover:text-blue-500 transition duration-300">Earnings</a>
    <a href="validator" class="text-gray-900 font-semibold hover:text-blue-500 transition duration-300">Validator</a>
    <a href="referral" class="text-gray-900 font-semibold hover:text-blue-500 transition duration-300">Referrals</a>
    <a href="withdraw" class="text-gray-900 font-semibold hover:text-blue-500 transition duration-300">Withdraw</a>
    <a href="videos" class="text-gray-900 font-semibold hover:text-blue-500 transition duration-300">Videos</a>
    <a href="help" class="text-gray-900 font-semibold hover:text-blue-500 transition duration-300">Help</a>
    <a href="profile" class="text-gray-900 font-semibold hover:text-blue-500 transition duration-300">Profile</a>
    <button id="logout-button-desktop" class="text-red-500 font-semibold hover:text-red-700 transition duration-300">Log Out</button>
</nav>


        <!-- Mobile Navigation Icon -->
        <button id="hamburger-icon" class="text-gray-900 text-2xl lg:hidden">
            <i class="fas fa-bars"></i>
        </button>
    </div>
</header>

<!-- Overlay -->
<div id="overlay" class="fixed inset-0 bg-black bg-opacity-30 hidden lg:hidden"></div>

<!-- Mobile Navigation -->
<nav id="mobile-nav" class="fixed left-0 top-0 h-full w-3/4 bg-white text-gray-900 shadow-2xl transform -translate-x-full transition-transform lg:hidden z-50 rounded-r-2xl">
    <div class="p-6 border-b flex justify-between items-center">
        <h3 class="text-xl font-semibold">Menu</h3>
        <button id="close-nav" class="text-gray-700 text-2xl"><i class="fas fa-times"></i></button>
    </div>
    <div class="p-6 flex flex-col space-y-4 text-lg">
        <a href="dashboard" class="flex items-center space-x-3 hover:text-blue-500">
            <i class="fas fa-tachometer-alt"></i><span>Dashboard</span>
        </a>
        <a href="earnings" class="flex items-center space-x-3 hover:text-blue-500">
            <i class="fas fa-dollar-sign"></i><span>Earnings</span>
        </a>
        <a href="validator" class="flex items-center space-x-3 hover:text-blue-500">
            <i class="fas fa-user-check"></i><span>Validator</span>
        </a>
        <a href="referral" class="flex items-center space-x-3 hover:text-blue-500">
            <i class="fas fa-user-friends"></i><span>Referrals</span>
        </a>
        <a href="withdraw" class="flex items-center space-x-3 hover:text-blue-500">
            <i class="fas fa-wallet"></i><span>Withdraw</span>
        </a>
        <a href="videos" class="flex items-center space-x-3 hover:text-blue-500">
            <i class="fas fa-info-circle"></i><span>Videos</span>
        </a>
        <a href="help" class="flex items-center space-x-3 hover:text-blue-500">
            <i class="fas fa-question-circle"></i><span>Help</span>
        </a>
        <a href="profile" class="flex items-center space-x-3 hover:text-blue-500">
            <i class="fas fa-user"></i><span>Profile</span>
        </a>
        <button id="logout-button-mobile" class="flex items-center space-x-3 text-red-500 hover:text-red-700">
            <i class="fas fa-sign-out-alt"></i><span>Log Out</span>
        </button>
    </div>
    
    <!-- Mobile Icons Section (Now inside the menu for small screens) -->
    <div class="p-6 border-t flex justify-around text-gray-700 text-xl bg-white shadow-md rounded-b-2xl">
        <button id="theme-toggle" class="text-yellow-500 hover:text-yellow-600 transition">
            <i class="fas fa-moon"></i>
        </button>
        <button id="language-toggle" class="text-blue-500 hover:text-blue-600 transition">
            <i class="fas fa-language"></i>
        </button>
        <button id="notification-bar" class="relative text-green-500 hover:text-green-600 transition">
            <i class="fas fa-bell"></i>
            <span class="absolute -top-1 -right-1 bg-red-600 text-white text-xs w-4 h-4 flex items-center justify-center rounded-full">3</span>
        </button>
    </div>
</nav>

<body class="bg-gray-100 font-sans mt-20">
<!-- Validator Registration Popup -->
<div id="validator-popup" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden z-50">
    <div class="bg-white p-6 rounded-lg shadow-lg w-full max-w-md max-h-[90vh] overflow-y-auto mt-10">
        <h3 class="text-xl font-bold text-gray-800 mb-4">Become a member or a validator</h3>
        <p class="text-gray-600 mb-2">To become an eligible member of Quantum Market, pay a one-time registration fee.</p>
        
        <!-- Membership Type Selection -->
        <div class="mb-4">
            <label class="block text-sm font-medium text-gray-700">Select Membership Type</label>
            <select id="amountPaid" class="w-full p-3 border rounded-lg focus:ring focus:ring-blue-300 transition">
                <option value="common">$6 - Common Member</option>
            </select>
        </div>

        <p class="text-gray-800 font-semibold">Send payment to:</p>

        <!-- Wallet Address (Locked) -->
        <div class="space-y-2">
            <div class="flex justify-between items-center bg-gray-100 p-2 rounded-lg">
                <span class="text-sm text-gray-700">Binance: <strong id="binance-wallet">821693759</strong></span>
                <button onclick="copyToClipboard('binance-wallet')" class="bg-blue-500 text-white px-2 py-1 rounded">Copy</button>
            </div>
        </div>
        <div id="message-boxx"></div>

        <h3 class="text-lg font-semibold mt-6">Submit Payment Details</h3>
        <p class="text-gray-600 text-sm mb-4">Submit your payment details for verification:</p>

        <!-- Payment Submission Form -->
        <form id="payment-form" class="space-y-4">
            <div>
                <label class="block text-sm font-medium text-gray-700">Transaction Hash (TXID)</label>
                <input type="text" id="txid" placeholder="Enter TXID" class="w-full p-3 border rounded-lg focus:ring focus:ring-blue-300 transition">
            </div>

            <div>
                <label class="block text-sm font-medium text-gray-700">Wallet Address Used</label>
                <input type="text" id="wallet-used" value="821693759" class="w-full p-3 border rounded-lg bg-gray-200 text-gray-600 cursor-not-allowed" readonly>
            </div>

            <div>
                <label class="block text-sm font-medium text-gray-700">Date & Time of Payment</label>
                <input type="datetime-local" id="payment-date" class="w-full p-3 border rounded-lg focus:ring focus:ring-blue-300 transition">
            </div>

            <div id="message-box"></div>
            <button id="pay-validator-btn" class="mt-4 bg-green-600 text-white py-2 px-4 rounded-lg w-full hover:bg-green-700 transition">
                Submit Payment
            </button>
        </form>
    </div>
</div>

<script>
    function copyToClipboard(id) {
        const text = document.getElementById(id).textContent;
        const messageBoxx = document.getElementById("message-boxx");

        navigator.clipboard.writeText(text)
            .then(() => {
                messageBoxx.innerHTML = `<p class="bg-green-100 text-green-700 p-2 rounded-md text-center">✅ Wallet Address Copied!</p>`;
            })
            .catch(() => {
                messageBoxx.innerHTML = `<p class="bg-red-100 text-red-700 p-2 rounded-md text-center">❌ Failed to copy address.</p>`;
            });

        // Clear message after 3 seconds
        setTimeout(() => {
            messageBoxx.innerHTML = "";
        }, 3000);
    }
</script>

<!-- Spacer for Other Items -->
<div class="h-8 md:h-14 lg:h-8"></div>

      <!-- Banner Area -->
      <section class="relative w-full h-[400px] md:h-[500px] lg:h-[600px] flex items-center justify-center text-center overflow-hidden bg-gradient-to-r from-white to-gray-100 shadow-lg rounded-2xl z-0">

    <!-- Moving Shapes -->
    <div class="absolute inset-0 overflow-hidden">
        <div class="absolute w-14 h-14 md:w-20 md:h-20 bg-blue-400 rounded-full opacity-50 animate-float" style="top: 5%; left: 10%;"></div>
        <div class="absolute w-24 h-24 md:w-28 md:h-28 bg-yellow-400 rounded-full opacity-50 animate-float-reverse" style="top: 10%; right: 15%;"></div>
        <div class="absolute w-32 h-32 md:w-40 md:h-40 bg-red-400 rounded-full opacity-50 animate-float" style="bottom: 8%; left: 20%;"></div>
        <div class="absolute w-20 h-20 md:w-28 md:h-28 bg-purple-500 rounded-md opacity-50 transform rotate-45 animate-float-reverse" style="bottom: 5%; right: 10%;"></div>
        <div class="absolute w-10 h-10 md:w-16 md:h-16 bg-green-400 rounded-full opacity-50 animate-float" style="top: 50%; left: 50%;"></div>
        <div class="absolute w-16 h-16 md:w-24 md:h-24 bg-orange-400 rounded-md opacity-50 transform rotate-12 animate-float" style="top: 20%; left: 40%;"></div>
        <div class="absolute w-12 h-12 md:w-18 md:h-18 bg-pink-400 rounded-full opacity-50 animate-float-reverse" style="bottom: 15%; right: 30%;"></div>
    </div>

    <!-- Banner Content -->
    <div class="relative z-10 px-6 lg:px-12">
        <h1 class="text-gray-900 text-3xl md:text-5xl font-extrabold tracking-wide uppercase bg-clip-text text-transparent bg-gradient-to-r from-blue-500 to-purple-600">
            Welcome to Your Dashboard
        </h1>
        <p class="text-gray-700 text-lg md:text-xl mt-4 max-w-2xl mx-auto">
            Track earnings, referrals, and validator progress effortlessly. Take control of your journey now!
        </p>

        <!-- Get Started Button -->
        <div class="mt-6">
            <a href="/validator" class="px-6 py-3 text-lg font-semibold text-white bg-gradient-to-r from-blue-500 to-purple-600 rounded-full shadow-md hover:scale-105 transition-transform duration-300">
                Get Started
            </a>
        </div>
    </div>
</section>


<!-- Floating Animations -->
<style>
    @keyframes float {
        0% { transform: translateY(0px) translateX(0px); }
        50% { transform: translateY(-30px) translateX(15px); }
        100% { transform: translateY(0px) translateX(0px); }
    }

    @keyframes float-reverse {
        0% { transform: translateY(0px) translateX(0px); }
        50% { transform: translateY(30px) translateX(-15px); }
        100% { transform: translateY(0px) translateX(0px); }
    }

    .animate-float {
        animation: float 8s infinite ease-in-out alternate;
    }

    .animate-float-reverse {
        animation: float-reverse 8s infinite ease-in-out alternate;
    }
</style>

<section id="dashboard-info" class="p-4 bg-gray-100 min-h-screen">
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        <!-- User Registration & Activation -->
        <div class="bg-white shadow-lg rounded-xl p-6 border-l-4 border-blue-500">
            <h3 class="text-xl font-bold text-gray-800 mb-2">User Registration & Activation</h3>
            <p class="text-gray-600">Register as a common member with <strong>$6</strong> or as a validator with <strong>$30</strong>.</p>
        </div>

        <!-- Validator Responsibilities -->
        <div class="bg-white shadow-lg rounded-xl p-6 border-l-4 border-yellow-500">
            <h3 class="text-xl font-bold text-gray-800 mb-2">Validator Responsibilities</h3>
            <p class="text-gray-600">Validators verify user payments and earn <strong>$1 per validation</strong>. At least one validator must approve a payment.</p>
        </div>

        <!-- Referral System -->
        <div class="bg-white shadow-lg rounded-xl p-6 border-l-4 border-green-500">
            <h3 class="text-xl font-bold text-gray-800 mb-2">Referral Earnings</h3>
            <ul class="list-disc pl-5 text-gray-600">
                <li>Direct referrals earn <strong>$1</strong> per activated account.</li>
                <li>Level 2 referrals earn <strong>$0.5</strong> per activation.</li>
                <li>If a referral registers as a validator, earn <strong>$10</strong> (direct) or <strong>$5</strong> (level 2).</li>
            </ul>
        </div>

        <!-- Payment System -->
        <div class="bg-white shadow-lg rounded-xl p-6 border-l-4 border-purple-500">
            <h3 class="text-xl font-bold text-gray-800 mb-2">Payment System</h3>
            <p class="text-gray-600">Payments are done manually through <strong>Binance</strong>.</p>
        </div>

        <!-- Transaction Proof Submission -->
        <div class="bg-white shadow-lg rounded-xl p-6 border-l-4 border-red-500">
            <h3 class="text-xl font-bold text-gray-800 mb-2">Transaction Proof Submission</h3>
            <ul class="list-disc pl-5 text-gray-600">
                <li>Transaction Hash (TXID)</li>
                <li>Payment method used (It should always be Binance)</li>
                <li>Sender and receiver wallet addresses</li>
            </ul>
        </div>

        <!-- Dashboard Features -->
        <div class="bg-white shadow-lg rounded-xl p-6 border-l-4 border-indigo-500">
            <h3 class="text-xl font-bold text-gray-800 mb-2">Dashboard Features</h3>
            <ul class="list-disc pl-5 text-gray-600">
                <li>Account activation & verification status</li>
                <li>Unique referral link</li>
                <li>Validator panel for pending verifications</li>
                <li>Wallet withdrawals (min: $1, 24hr approval)</li>
            </ul>
        </div>
    </div>
</section>

<section id="validators" class="p-4 bg-gray-100 min-h-screen">
    <div class="space-y-6">  
        <!-- Validators Page Title -->
        <div class="bg-gradient-to-r from-gray-900 via-gray-800 to-gray-900 shadow-2xl rounded-2xl p-6 text-center">
            <h2 class="text-2xl sm:text-3xl text-white font-extrabold tracking-wide uppercase py-3 rounded-xl 
                       bg-gradient-to-r from-green-500 to-blue-600 inline-block px-4 sm:px-6">
                Membership Validators Panel
            </h2>
        </div>

        <!-- Validate Payment Panel -->
        <div class="bg-white shadow-lg rounded-lg p-4 sm:p-6 w-full md:w-3/4 lg:w-2/3 xl:w-1/2 mx-auto">
            <h3 class="text-lg font-semibold text-gray-800 mb-3">Validate Payment</h3>
            <p class="text-gray-600">Review and approve/reject payments.</p>
        </div>

        <!-- Earnings Tracker for Validators -->
        <div class="bg-white shadow-lg rounded-lg p-4 sm:p-6 w-full md:w-3/4 lg:w-2/3 xl:w-1/2 mx-auto">
            <h3 class="text-lg font-semibold text-gray-800 mb-3">Earnings Tracker</h3>
            <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4">
                <div class="bg-green-100 p-3 sm:p-4 rounded-lg text-center">
                    <h4 class="text-lg font-semibold text-gray-700">Total Validations</h4>
                    <p id="total-validations" class="text-2xl font-bold text-green-700">0</p>
                </div>
                <div class="bg-blue-100 p-3 sm:p-4 rounded-lg text-center">
                    <h4 class="text-lg font-semibold text-gray-700">Total Earnings</h4>
                    <p id="total-earnings" class="text-2xl font-bold text-blue-700">$0</p>
                </div>
                <div class="bg-gray-100 p-3 sm:p-4 rounded-lg text-center">
                    <h4 class="text-lg font-semibold text-gray-700">Pending Earnings</h4>
                    <p id="pending-earnings" class="text-2xl font-bold text-gray-600">$0</p>
                </div>
            </div>
        </div>

        <!-- Admin Panel -->
     <div id="admin-panel" class="hidden bg-white shadow-xl rounded-2xl p-8 mt-6 max-w-4xl mx-auto border border-gray-200">
        <h3 class="text-2xl font-bold text-gray-900 mb-4">Admin Panel - Pending membership Validator Approvals</h3>
        
        <div class="overflow-x-auto mt-4 bg-gray-50 p-4 rounded-lg shadow-lg border border-gray-200">
            <table class="w-full border-collapse text-sm text-left">
                <thead>
                    <tr class="bg-gradient-to-r from-blue-500 to-purple-600 text-white">
                        <th class="p-3 text-left">Email</th>
                        <th class="p-3 text-left">Amount</th>
                        <th class="p-3 text-left">TXID</th>
                        <th class="p-3 text-left">Validator</th>
                        <th class="p-3 text-left">Action</th>
                    </tr>
                </thead>
                <tbody id="admin-approval-list" class="text-gray-800">
                    <!-- Pending validator approvals will be dynamically inserted here -->
                </tbody>
            </table>
        </div>
    </div>

        <!-- Pending Transactions Table -->
        <div class="bg-white shadow-2xl rounded-2xl p-4 sm:p-6 w-full">
            <h3 class="text-lg sm:text-xl font-bold text-gray-900 mb-3">Pending Transactions</h3>
            <div class="overflow-x-auto w-full">
                <table class="w-full min-w-full border-collapse text-sm shadow-md">
                    <thead>
                        <tr class="bg-gradient-to-r from-indigo-500 to-blue-500 text-white">
                            <th class="px-3 py-2 sm:px-4 sm:py-3 border border-gray-300">Username</th>
                            <th class="px-3 py-2 sm:px-4 sm:py-3 border border-gray-300">Amount Paid</th>
                            <th class="px-3 py-2 sm:px-4 sm:py-3 border border-gray-300">Transaction ID</th>
                            <th class="px-3 py-2 sm:px-4 sm:py-3 border border-gray-300">Time Submitted</th>
                            <th class="px-3 py-2 sm:px-4 sm:py-3 border border-gray-300">Status</th>
                            <th class="px-3 py-2 sm:px-4 sm:py-3 border border-gray-300">Actions</th>
                        </tr>
                    </thead>
                    <tbody id="pending-transactions" class="bg-gray-50 divide-y divide-gray-200">
                        <!-- Transactions dynamically inserted here -->
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Validation History -->
        <div class="bg-white shadow-lg rounded-lg p-4 sm:p-6 w-full md:w-3/4 lg:w-2/3 xl:w-1/2 mx-auto">
            <h3 class="text-lg font-semibold text-gray-800 mb-3">Validation History</h3>
            <p class="text-gray-600">View previously validated people worldwide.</p>
            <div class="overflow-x-auto">
                <table class="w-full min-w-full border-collapse border border-gray-300 text-sm">
                    <thead>
                        <tr class="bg-gray-200">
                            <th class="p-2 sm:p-3 border">Username</th>
                            <th class="p-2 sm:p-3 border">Amount</th>
                            <th class="p-2 sm:p-3 border">Transaction ID</th>
                            <th class="p-2 sm:p-3 border">Status</th>
                            <th class="p-2 sm:p-3 border">Date</th>
                        </tr>
                    </thead>
                    <tbody id="validation-history">
                        <!-- Approved transactions will be inserted here -->
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</section>   

        <div>
            <div class="bg-white shadow-2xl rounded-2xl p-8">
                <h3 class="text-lg font-semibold text-gray-800 mb-4">Earnings Histogram</h3>
                <canvas id="histogramChart"></canvas>
            </div>
        </div>
    
         <!-- Referral Section -->
<div class="bg-white shadow-xl rounded-2xl p-8 mt-6 max-w-3xl mx-auto border border-gray-200">
    <h3 class="text-xl font-bold text-gray-900 mb-4">Your Referral Link</h3>
    
    <div class="flex items-center space-x-4 bg-gray-100 p-3 rounded-lg shadow-inner">
        <p id="referral-link" class="flex-grow text-gray-800 bg-white px-4 py-2 rounded-md border border-gray-300 overflow-hidden text-ellipsis whitespace-nowrap">
            Your Referral Link Here
        </p>
        <button id="copy-link-button" class="px-4 py-2 bg-gradient-to-r from-blue-500 to-purple-600 text-white font-semibold rounded-lg shadow-md hover:scale-105 transition-transform duration-300">
            Copy
        </button>
        
        <a id="whatsapp-share-button" target="_blank" class="px-4 py-2 bg-green-500 text-white rounded-lg shadow-md hover:bg-green-600 transition duration-300">
            <i class="fab fa-whatsapp text-lg"></i>
        </a>
    </div>

    <p id="copy-message" class="hidden text-sm"></p>

    <!-- Referred Friends Section -->
<h3 class="text-xl font-bold text-gray-900 mt-6">Your Referred Friends</h3>

<div class="w-full sm:w-11/12 md:w-3/4 lg:w-2/3 xl:w-1/2 mx-auto overflow-x-auto mt-4 bg-gray-50 p-4 rounded-lg shadow-lg border border-gray-200">
    <table class="w-full border-collapse text-sm text-left">
        <thead>
            <tr class="bg-gradient-to-r from-blue-500 to-purple-600 text-white">
                <th class="p-3 text-left">Email</th>
                <th class="p-3 text-left">Status</th>
            </tr>
        </thead>
        <tbody id="referred-users-list" class="text-gray-800">
            <!-- Referred users will be dynamically inserted here -->
        </tbody>
    </table>
</div>
</div>

        <!-- Social Media Links -->
    <div class="bg-white shadow-md rounded-lg p-6 mt-6 max-w-3xl mx-auto text-center">
        <h3 class="text-lg font-semibold text-gray-800 mb-4">Follow Us on Social Media</h3>
        <div class="flex justify-center space-x-6">
            <!--<a href="https://t.me/yourchannel" target="_blank" class="text-blue-500 text-2xl hover:text-blue-700">
                <i class="fab fa-telegram-plane"></i>-->
            </a>
            <a href="https://x.com/GlaciasO25?t=67F_EY_93jev-Rjj-tv1Gw&s=09" target="_blank" class="text-blue-400 text-2xl hover:text-blue-600">
                <i class="fab fa-twitter"></i>
            </a>
            <a href="https://www.facebook.com/profile.php?id=61564678751322" target="_blank" class="text-blue-600 text-2xl hover:text-blue-800">
                <i class="fab fa-facebook"></i>
            </a>
            <a href=" https://www.instagram.com/quantum_arket?igsh=YzljYTk1ODg3Zg==" target="_blank" class="text-pink-500 text-2xl hover:text-pink-700">
                <i class="fab fa-instagram"></i>
            </a>
            <a href="https://www.tiktok.com/@antonytheeson?_t=ZM-8uB5WCMpRBd&_r=1" target="_blank" class="text-black text-2xl hover:text-gray-700 mx-2">
                <i class="fab fa-tiktok"></i>
            </a>
            
        </div>
    </div>
    
    <footer class="bg-gray-900 text-white text-center py-4">
        <p class="copyright-text text-sm">
            &copy; 2025 <span class="font-bold">Quantum Market</span>. All rights reserved.
        </p>
        <p class="text-xs mt-1">
            Designed by 
            <a href="https://antocapteknologies.com" class="text-blue-400 hover:text-blue-300 font-semibold" target="_blank">
                Antocap Teknologies
            </a>
        </p>
    </footer>    
      
    <script type ="module" src="https://www.gstatic.com/firebasejs/11.4.0/firebase-app.js"></script>
    <script type ="module" src="https://www.gstatic.com/firebasejs/11.4.0/firebase-analytics.js"></script>
    <script type ="module" src="https://www.gstatic.com/firebasejs/11.4.0/firebase-auth.js"></script>
    <script type ="module" src="https://www.gstatic.com/firebasejs/11.4.0/firebase-firestore.js"></script>
    <script type ="module" src="https://www.gstatic.com/firebasejs/11.4.0/firebase-storage.js"></script>
  
       <!-- Your custom script -->
       <script type="module" src="script.js"></script>
<script type="module" src="referral.js"></script>

<script type="module">
    import { auth, db, doc, getDoc, updateDoc, query, collection, where, getDocs, increment, setDoc, onAuthStateChanged, limit, onSnapshot, getFirestore, serverTimestamp } from './script.js';
    
    document.addEventListener("DOMContentLoaded", async () => {
        const validatorPopup = document.getElementById("validator-popup");
        const payBtn = document.getElementById("pay-validator-btn");
        const transactionTable = document.getElementById("pending-transactions");
        const earningsDisplay = document.getElementById("total-earnings");
        const txidInput = document.getElementById("txid");
        const walletUsedInput = document.getElementById("wallet-used");
        const paymentDateInput = document.getElementById("payment-date");
        const messageBox = document.getElementById("message-box"); // UI message box
        const pendingEarningsElem = document.getElementById("pending-earnings");
        
        let user;
    
        onAuthStateChanged(auth, async (currentUser) => {
            if (currentUser) {
                user = currentUser;
                await updateUserToValidator();
                checkValidatorStatus();
                loadValidatorDashboard();
                fetchTotalValidations();
                loadValidationHistory();
            } else {
                window.location.href = "/";
            }
        });
    
        function displayMessage(type, text) {
            const color = type === "success" ? "green" : "red";
            messageBox.innerHTML = `<div class="message" style="color: ${color}; font-weight: bold;">${text}</div>`;
            setTimeout(() => {
                messageBox.innerHTML = "";
            }, 5000);
        }
    
        //CHECKING IF THE USER IS FULLY VALIDATED
        async function updateUserToValidator() {
        const userRef = doc(db, "users", user.uid);
        const userSnap = await getDoc(userRef);
    
        if (userSnap.exists()) {
            const userData = userSnap.data();
    
            // Check if the user's payment has been approved
            const paymentsQuery = query(collection(db, "payments"), 
                                        where("email", "==", user.email), 
                                        where("statuss", "==", "approved"));
            const paymentsSnap = await getDocs(paymentsQuery);
    
            if (!userData.isVvalidator && !paymentsSnap.empty) {
                // ✅ Update user to become a validator
                await updateDoc(userRef, {
                    isVvalidator: true
                });
    
                console.log("✅ User is now a validator.");
            }
        }
    }
    
    
        //HIDING AND DISPLAYING OF POP-UP CONTAINER
        async function checkValidatorStatus() {
        const paymentQuery = query(
            collection(db, "payments"),
            where("email", "==", user.email),
            where("statuss", "==", "approved-admin"),
            limit(1)
        );
    
        const paymentSnap = await getDocs(paymentQuery);
    
        if (!paymentSnap.empty) {
            console.log("✅ Payment is approved. Hiding pop-up.");
            validatorPopup.classList.add("hidden");
            loadAssignedTransactions();
        } else {
            console.log("❌ Payment not approved yet. Showing pop-up.");
            validatorPopup.classList.remove("hidden");
        }
    }
    
    // RUN CHECK ON PAGE LOAD
    document.addEventListener("DOMContentLoaded", checkValidatorStatus);
    
    
    // CLICKING SUBMISSION BUTTON IN VALIDATORS PAGE
    payBtn.addEventListener("click", async (event) => {
        event.preventDefault();
    
        if (!user) return displayMessage("error", "❌ Not authenticated!");
    
        const txid = txidInput.value.trim();
        const walletUsed = walletUsedInput.value.trim();
        const paymentDate = paymentDateInput.value;
    
        if (!txid || !walletUsed || !paymentDate) {
            return displayMessage("error", "❌ Please fill in all fields.");
        }
    
        try {
            // Disable form inputs & button to prevent multiple submissions
            payBtn.disabled = true;
            txidInput.disabled = true;
            walletUsedInput.disabled = true;
            paymentDateInput.disabled = true;
    
            // Fetch all validators from USERS collection
            const validatorQuery = query(collection(db, "users"), where("isVvalidator", "==", true));
            const validatorSnap = await getDocs(validatorQuery);
            let validatorList = [];
    
            validatorSnap.forEach(doc => {
                validatorList.push(doc.id);
            });
    
            // Randomly pick one validator
            validatorList = validatorList.sort(() => 0.5 - Math.random()).slice(0, 1);
    
            if (validatorList.length < 1) {
                return displayMessage("error", "❌ Not enough validators available.");
            }
    
            const chosenValidator = validatorList[0];
    
            // Store payment details in Firestore
            const paymentRef = doc(collection(db, "payments"));
            await setDoc(paymentRef, {
                email: user.email,
                txid,
                walletAddress: walletUsed,
                paymentDate,
                assignedValidators: [chosenValidator], // Assigned validator
                approvals: [],
                statuss: "pending",
                timestamp: serverTimestamp()
            });
    
            // ✅ Update user document to set isVvalidator = true (Pending Approval)
            await updateDoc(doc(db, "users", user.uid), {
                isVvalidator: true
            });
    
            displayMessage("success", "✅ Payment submitted. Waiting for approval.");
    
            // 🔹 Call Cloud Function to send email to validator
            //await fetch("https://YOUR_CLOUD_FUNCTION_URL/sendApprovalEmail", {
              //  method: "POST",
               // headers: {
              //      "Content-Type": "application/json"
              //  },
              //  body: JSON.stringify({ validatorEmail: chosenValidator, txid })
          //  });
    
        } catch (error) {
            console.error("Error submitting payment:", error);
    
            // Enable the form again for retry
            payBtn.disabled = false;
            txidInput.disabled = false;
            walletUsedInput.disabled = false;
            paymentDateInput.disabled = false;
    
            displayMessage("error", "❌ Submission failed. Try again.");
        }
    });
    
       //LOADING ASSIGNED TRANSACTIONS
       async function loadAssignedTransactions() {
    try {
        const q = query(
            collection(db, "payments"),
            where("statuss", "==", "pending"),
            where("assignedValidators", "array-contains", user.uid)
        );

        const querySnapshot = await getDocs(q);
        let transactionHTML = "";

        querySnapshot.forEach((docSnap) => {
            const data = docSnap.data();
            const paymentId = docSnap.id;

            let paymentTime = "N/A";
            if (data.timestamp?.seconds) {
                paymentTime = new Date(data.timestamp.seconds * 1000).toLocaleString();
            }
            // Determine the correct status
            let statusText = "Pending Validation";
            let statusClass = "text-blue-500";

            if (data.statuss === "pending-admin") {
                statusText = "Pending Admin Approval";
                statusClass = "text-yellow-500";
            } else if (data.statuss === "reassigned") {
                statusText = "Reassigned";
                statusClass = "text-orange-500";
            } else if (data.statuss === "approved-admin") {
                statusText = "Approved";
                statusClass = "text-green-600";
            }

            transactionHTML += `
                <tr id="transaction-${paymentId}" class="hover:bg-gray-100 transition duration-200">
                    <td class="p-4 border border-gray-300">${data.email}</td>
                    <td class="p-4 border border-gray-300 text-green-600 font-semibold">$${data.amountPaid || 6}</td>
                    <td class="p-4 border border-gray-300">
                        <div class="relative flex flex-col">
                            <pre id="txid-${paymentId}" class="whitespace-pre-wrap break-words cursor-text select-all p-2 bg-gray-100 rounded w-full">
                    ${data.txid}
                            </pre>
                            <div class="flex items-center mt-2">
                                <button onclick="copyTxid('${paymentId}')" class="px-2 py-1 bg-blue-500 text-white text-sm font-semibold rounded hover:bg-blue-600">
                                    Copy
                                </button>
                                <span id="copy-msg-${paymentId}" class="ml-2 text-sm font-semibold hidden"></span>
                            </div>
                        </div>
                    </td>
                    <td class="p-4 border border-gray-300">${paymentTime}</td>
                    <td class="p-4 border border-gray-300 status-cell ${statusClass}">${statusText}</td>
                    <td class="p-4 border border-gray-300 text-center">
                        <button class="approve-btn px-4 py-2 bg-indigo-600 text-white font-bold rounded-lg hover:bg-indigo-700 transition"
                            data-id="${paymentId}">
                            Approve
                        </button>
                        <button class="reject-btn px-4 py-2 bg-red-600 text-white font-bold rounded-lg hover:bg-red-700 transition"
                            data-id="${paymentId}">
                            Reject
                        </button>
                    </td>
                </tr>
            `;
        });

        document.getElementById("pending-transactions").innerHTML = transactionHTML;

        document.querySelectorAll(".approve-btn").forEach(button => {
            button.addEventListener("click", () => approvePayment(button.dataset.id));
        });

        document.querySelectorAll(".reject-btn").forEach(button => {
            button.addEventListener("click", () => rejectPayment(button.dataset.id));
        });

        // Start listening for real-time updates
        listenForTransactionUpdates();
    } catch (error) {
        console.error("Error loading transactions:", error);
    }
}


// LISTENING FOR TRANSACTION UPDATES
function listenForTransactionUpdates() {
    const paymentsRef = collection(db, "payments");

    onSnapshot(paymentsRef, (snapshot) => {
        snapshot.docChanges().forEach((change) => {
            const data = change.doc.data();
            const paymentId = change.doc.id;
            let row = document.getElementById(`transaction-${paymentId}`);

            if (row) {
                let statusCell = row.querySelector(".status-cell");

                if (data.statuss === "approved-admin") {
                    statusCell.innerHTML = `<span class="text-green-600 font-semibold">Approved</span>`;
                    updateValidationHistory(paymentId, data);
                    row.remove(); // Move to history
                } else if (data.statuss === "pending-admin") {
                    statusCell.innerHTML = `<span class="text-yellow-500 font-semibold">Pending Admin Approval</span>`;
                } else if (data.statuss === "reassigned") {
                    statusCell.innerHTML = `<span class="text-orange-500 font-semibold">Reassigned</span>`;
                }
            }
        });
    });
}

// Call this function after loading transactions
listenForTransactionUpdates();


// APPROVE PAYMENT (Send to Admin)
async function approvePayment(paymentId) {
    try {
        const button = document.querySelector(`[data-id='${paymentId}']`);
        if (!button) return;

        button.textContent = "Sending to Admin...";
        button.disabled = true;

        const paymentRef = doc(db, "payments", paymentId);
        const paymentDoc = await getDoc(paymentRef);

        if (!paymentDoc.exists()) return;
        const paymentData = paymentDoc.data();

        if (paymentData?.approvals?.includes(user.uid)) {
            button.textContent = "Already Sent";
            return;
        }

        await updateDoc(paymentRef, {
            approvals: [...(paymentData?.approvals || []), user.uid],
            statuss: "pending-admin",
            validator: user.uid
        });

        button.textContent = "Sent to Admin";
        button.classList.add("bg-gray-400");

        // Update row status instead of removing it
        const row = button.closest("tr");
        if (row) {
            row.querySelector(".status-cell").innerHTML = `<span class="text-yellow-500 font-semibold">Pending Admin Approval</span>`;
        }
    } catch (error) {
        console.error("Error approving payment:", error);
    }
}

// REJECT PAYMENT (Reassign Validator)
async function rejectPayment(paymentId) {
    try {
        const button = document.querySelector(`[data-id='${paymentId}']`);
        if (!button) return;

        button.textContent = "Rejecting...";
        button.disabled = true;

        const paymentRef = doc(db, "payments", paymentId);
        const paymentDoc = await getDoc(paymentRef);

        if (!paymentDoc.exists()) return;
        const paymentData = paymentDoc.data();

        let updatedValidators = (paymentData?.assignedValidators || []).filter(uid => uid !== user.uid);

        const validatorQuery = query(
            collection(db, "users"),
            where("isVvalidator", "==", true)
        );

        const validatorSnapshot = await getDocs(validatorQuery);
        let availableValidators = validatorSnapshot.docs
            .map(docSnap => docSnap.id)
            .filter(uid => !updatedValidators.includes(uid));

        if (availableValidators.length === 0) {
            button.textContent = "No Available Validators";
            button.classList.add("bg-gray-400");
            return;
        }

        const newValidator = availableValidators[Math.floor(Math.random() * availableValidators.length)];
        updatedValidators.push(newValidator);

        await updateDoc(paymentRef, {
            assignedValidators: updatedValidators,
            statuss: "reassigned"
        });

        button.textContent = "Rejected";
        button.classList.add("bg-gray-400");

        // Update row status instead of removing it
        const row = button.closest("tr");
        if (row) {
            row.querySelector(".status-cell").innerHTML = `<span class="text-orange-500 font-semibold">Reassigned</span>`;
        }
    } catch (error) {
        console.error("Error rejecting payment:", error);
    }
}

    //LISTEN FOR REAL-TIME UPDATES
function listenForAdminApproval() {
    const paymentsRef = collection(db, "payments");

    onSnapshot(paymentsRef, (snapshot) => {
        snapshot.docChanges().forEach((change) => {
            const data = change.doc.data();
            const paymentId = change.doc.id;
            let row = document.getElementById(`payment-${paymentId}`);

            if (!row) {
                // If row does not exist, create it dynamically
              //  row = document.createElement("tr");
              //  row.id = `payment-${paymentId}`;
               // row.innerHTML = `
                //    <td class="p-4 border">${data.email}</td>
                 //   <td class="p-4 border text-green-600 font-semibold">$${data.amountPaid || 6}</td>
                 //   <td class="p-4 border">${data.txid}</td>
                 //   <td class="p-4 border status-cell">Pending Validation</td>
                  //  <td class="p-4 border text-center">
                  //   <div class="flex justify-center gap-4">
                  //    <button class="approve-btn px-4 py-2 bg-indigo-600 text-white font-bold rounded-lg hover:bg-indigo-700 transition"
                  //     data-id="${paymentId}">
                   //       Approve
                   //  </button>
                  //   <button class="reject-btn px-4 py-2 bg-red-600 text-white font-bold rounded-lg hover:bg-red-700 transition"
                  //    data-id="${paymentId}">
                 //        Reject
                 //   </button>
                // </div>
               // </td>
               // `;
                document.getElementById("pending-transactions").appendChild(row);

                // Add event listeners for new rows
                row.querySelector(".approve-btn").addEventListener("click", () => approvePayment(paymentId));
                row.querySelector(".reject-btn").addEventListener("click", () => rejectPayment(paymentId));
            }

            let statusCell = row.querySelector(".status-cell");

            // Update the status dynamically
            if (data.statuss === "approved-admin") {
                statusCell.innerHTML = `<span class="text-green-600 font-semibold">Approved</span>`;
                updateValidationHistory(paymentId, data);
                row.remove(); // Move it to history
            } else if (data.statuss === "pending-admin") {
                statusCell.innerHTML = `<span class="text-yellow-500 font-semibold">Pending Admin Approval</span>`;
            } else if (data.statuss === "reassigned") {
                statusCell.innerHTML = `<span class="text-orange-500 font-semibold">Reassigned</span>`;
            }
        });
    });
}


// REMOVE FROM ADMIN PANEL
function removeFromAdminPanel(paymentId) {
    const row = document.getElementById(`admin-approval-${paymentId}`);
    if (row) row.remove();
}

// UPDATE VALIDATION HISTORY
function updateValidationHistory(paymentId, paymentData) {
    const historyTable = document.getElementById("validation-history");

    let paymentTime = "N/A";
    if (paymentData.timestamp?.seconds) {
        paymentTime = new Date(paymentData.timestamp.seconds * 1000).toLocaleString();
    }

   // if (!document.getElementById(`history-${paymentData.txid}`)) {
    //    historyTable.innerHTML += `
    //        <tr id="history-${paymentData.txid}">
    //            <td class="p-3 border">${paymentData.email}</td>
    //            <td class="p-3 border">$${paymentData.amountPaid || 6}</td>
    //            <td class="p-3 border">${paymentData.txid}</td>
    //            <td class="p-3 border text-green-600 font-bold">Approved</td>
    //            <td class="p-3 border">${paymentTime}</td>
    //        </tr>
    //    `;
  //  }
}

// LOAD VALIDATOR DASHBOARD
async function loadValidatorDashboard() {
    if (!user || !user.uid) return;

    const userRef = doc(db, "users", user.uid);
    const userSnap = await getDoc(userRef);
    if (!userSnap.exists()) return;

    earningsDisplay.textContent = `$${userSnap.data().totalEarnings || 0}`;
}



    // ADMIN PANEL (Only for marketquantum25@gmail.com)
async function loadAdminApprovals() {
    try {
        if (user.email !== "marketquantum25@gmail.com") {
            document.getElementById("admin-panel").innerHTML = "<p>Access Denied</p>";
            return;
        }

        // Show admin panel
        document.getElementById("admin-panel").classList.remove("hidden");

        const q = query(collection(db, "payments"), where("statuss", "==", "pending-admin"));
        const querySnapshot = await getDocs(q);
        let approvalHTML = "";

        querySnapshot.forEach((docSnap) => {
            const data = docSnap.data();
            const paymentId = docSnap.id;

            approvalHTML += `
                <tr id="admin-approval-${paymentId}" class="hover:bg-gray-100 transition duration-200">
                    <td class="p-4 border border-gray-300">${data.email}</td>
                    <td class="p-4 border border-gray-300 text-green-600 font-semibold">$${data.amountPaid || 6}</td>
                   <td class="p-4 border border-gray-300">
                         <div class="relative flex flex-col">
                             <pre id="txid-${paymentId}" class="whitespace-pre-wrap break-words cursor-text select-all p-2 bg-gray-100 rounded w-full">
                     ${data.txid}
                             </pre>
                             <div class="flex items-center mt-2">
                                 <button onclick="copyTxid('${paymentId}')" class="px-2 py-1 bg-blue-500 text-white text-sm font-semibold rounded hover:bg-blue-600">
                                     Copy
                                 </button>
                                 <span id="copy-msg-${paymentId}" class="ml-2 text-sm font-semibold hidden"></span>
                             </div>
                         </div>
                     </td>
                    <td class="p-4 border border-gray-300">${data.validator}</td>
                    <td class="p-4 border border-gray-300 text-center">
                        <button class="admin-approve-btn px-4 py-2 bg-indigo-600 text-white font-bold rounded-lg hover:bg-indigo-700 transition" data-id="${paymentId}">
                            Approve
                        </button>
                        <button class="admin-reject-btn px-4 py-2 bg-red-600 text-white font-bold rounded-lg hover:bg-red-700 transition" data-id="${paymentId}">
                            Reject
                        </button>
                    </td>
                </tr>
            `;
        });

        document.getElementById("admin-approval-list").innerHTML = approvalHTML;

        document.querySelectorAll(".admin-approve-btn").forEach(button => {
            button.addEventListener("click", () => finalizeApproval(button.dataset.id));
        });

        document.querySelectorAll(".admin-reject-btn").forEach(button => {
            button.addEventListener("click", () => rejectApproval(button.dataset.id));
        });
    } catch (error) {
        console.error("Error loading admin approvals:", error);
    }
}

// APPROVE PAYMENT
async function finalizeApproval(paymentId) {
    try {
        const paymentRef = doc(db, "payments", paymentId);
        const paymentDoc = await getDoc(paymentRef);
        if (!paymentDoc.exists()) return;
        const paymentData = paymentDoc.data();

        // Ensure the validator exists before updating earnings
        if (paymentData.validator) {
            const validatorRef = doc(db, "users", paymentData.validator);
            await updateDoc(validatorRef, { totalEarnings: increment(1) });
        }

        // Hide the pop-up for the user who made the payment
        const userPopup = document.getElementById(`payment-popup-${paymentData.email}`);
        if (userPopup) userPopup.classList.add("hidden");

        // Mark payment as approved
        await updateDoc(paymentRef, { statuss: "approved-admin" });

        // Update UI
        const button = document.querySelector(`[data-id='${paymentId}']`);
        if (button) {
            button.textContent = "Approved";
            button.classList.add("bg-gray-400");
            button.disabled = true;
        }

        // Remove from admin panel
        removeFromAdminPanel(paymentId);
    } catch (error) {
        console.error("Error finalizing approval:", error);
    }
}

// REJECT PAYMENT (Reassign to another validator)
async function rejectApproval(paymentId) {
    try {
        const paymentRef = doc(db, "payments", paymentId);
        const paymentDoc = await getDoc(paymentRef);
        if (!paymentDoc.exists()) return;
        const paymentData = paymentDoc.data();

        let updatedValidators = paymentData.assignedValidators || [];

        // Fetch available validators
        const validatorQuery = query(
            collection(db, "users"),
            where("isVvalidator", "==", true)
        );

        const validatorSnapshot = await getDocs(validatorQuery);
        let availableValidators = validatorSnapshot.docs
            .map(docSnap => docSnap.id)
            .filter(uid => !updatedValidators.includes(uid));

        if (availableValidators.length === 0) {
            console.error("No available validators.");
            return;
        }

        const newValidator = availableValidators[Math.floor(Math.random() * availableValidators.length)];
        updatedValidators.push(newValidator);

        // Update payment record
        await updateDoc(paymentRef, {
            assignedValidators: updatedValidators,
            statuss: "reassigned"
        });

        // Remove from admin panel
        removeFromAdminPanel(paymentId);
    } catch (error) {
        console.error("Error rejecting approval:", error);
    }
}


// FUNCTION TO ADD TO VALIDATION HISTORY
function addToValidationHistory(paymentData, status) {
    const historyTable = document.getElementById("validation-history");

    let paymentTime = "N/A";
    if (paymentData.timestamp?.seconds) {
        paymentTime = new Date(paymentData.timestamp.seconds * 1000).toLocaleString();
    }

    historyTable.innerHTML += `
        <tr>
            <td class="p-3 border">${paymentData.email}</td>
            <td class="p-3 border">$${paymentData.amountPaid || 6}</td>
           <td class="p-4 border border-gray-300">${paymentData.txid}</td>
            <td class="p-3 border text-green-600 font-bold">${status}</td>
            <td class="p-3 border">${paymentTime}</td>
        </tr>
    `;
}

// LOAD VALIDATION HISTORY
async function loadValidationHistory() {
    const historyTable = document.getElementById("validation-history");
    historyTable.innerHTML = ""; // Clear existing entries before reloading

    try {
        const q = query(collection(db, "payments"), where("statuss", "==", "approved-admin"));
        const querySnapshot = await getDocs(q);

        querySnapshot.forEach((docSnap) => {
            const paymentData = docSnap.data();
            const paymentId = docSnap.id;

            let paymentTime = "N/A";
            if (paymentData.timestamp?.seconds) {
                paymentTime = new Date(paymentData.timestamp.seconds * 1000).toLocaleString();
            }

            if (!document.getElementById(`history-${paymentData.txid}`)) {
                historyTable.innerHTML += `
                    <tr id="history-${paymentData.txid}">
                        <td class="p-3 border">${paymentData.email}</td>
                        <td class="p-3 border">$${paymentData.amountPaid || 6}</td>
                        <td class="p-4 border border-gray-300">${paymentData.txid}</td>
                        <td class="p-3 border text-green-600 font-bold">Approved</td>
                        <td class="p-3 border">${paymentTime}</td>
                    </tr>
                `;
            }
        });
    } catch (error) {
        console.error("Error loading validation history:", error);
    }
}

// LOAD DATA ON PAGE LOAD
onAuthStateChanged(auth, async (currentUser) => {
    if (currentUser) {
        user = currentUser;
        loadAdminApprovals();
        listenForAdminApproval();
        loadValidatorDashboard();
        loadAssignedTransactions();
        loadValidationHistory(); // Load validation history when page loads
    }
});

    

    // FETCH TOTAL VALIDATIONS DONE BY THE LOGGED-IN VALIDATOR
    async function fetchTotalValidations() {
        if (!user) return;
    
        const totalValidationsDisplay = document.getElementById("total-validations");
    
        const approvalsQuery = query(
            collection(db, "payments"),
            where("approvals", "array-contains", user.email),
            where("statuss", "==", "approved-admin") // Only count approved payments
        );
    
        const approvalsSnap = await getDocs(approvalsQuery);
        const totalValidations = approvalsSnap.size; // Count total documents
    
        // Update UI
        totalValidationsDisplay.textContent = totalValidations;
    }
    
    // LOAD VALIDATION HISTORY AND TOTAL VALIDATIONS
    async function loadValidationHistory() {
        const historyTable = document.getElementById("validation-history");
    
        if (!user) return;
    
        const q = query(collection(db, "payments"), where("statuss", "==", "approved-admin"));
    
        // Listen for real-time updates
        onSnapshot(q, async (querySnapshot) => {
            let historyHTML = "";
    
            if (querySnapshot.empty) {
                historyHTML = `
                    <tr>
                        <td colspan="5" class="p-3 text-center text-gray-500">No approved payments yet.</td>
                    </tr>
                `;
            } else {
                querySnapshot.forEach((docSnap) => {
                    const data = docSnap.data();
                    let paymentTime = "N/A";
    
                    if (data.timestamp?.seconds) {
                        paymentTime = new Date(data.timestamp.seconds * 1000).toLocaleString();
                    }
    
                    historyHTML += `
                        <tr>
                            <td class="p-3 border">${data.email}</td>
                            <td class="p-3 border">$${data.amountPaid || 6}</td>
                            <td class="p-3 border">${data.txid}</td>
                            <td class="p-3 border text-green-600 font-bold">Approved</td>
                            <td class="p-3 border">${paymentTime}</td>
                        </tr>
                    `;
                });
            }
    
            historyTable.innerHTML = historyHTML;
    
            // Fetch the total validations after loading the history
            fetchTotalValidations();
        });
    }

    
    // LOAD VALIDATION HISTORY ON PAGE LOAD
    document.addEventListener("DOMContentLoaded", () => {
        loadValidationHistory();
    });
});
    </script>

    <script>
        // COPYING TXID
     function copyTxid(paymentId) {
    const txidElement = document.getElementById(`txid-${paymentId}`);
    const txidText = txidElement.innerText.trim();
    const messageElement = document.getElementById(`copy-msg-${paymentId}`);

    navigator.clipboard.writeText(txidText).then(() => {
        showMessage(messageElement, "Copied successfully!", "text-green-600");
    }).catch(err => {
        console.error("Failed to copy:", err);
        showMessage(messageElement, "Failed to copy!", "text-red-600");
    });
}

function showMessage(element, message, colorClass) {
    element.textContent = message;
    element.className = `ml-2 text-sm font-semibold ${colorClass}`;
    element.classList.remove("hidden");

    // Hide message after 3 seconds
    setTimeout(() => {
        element.classList.add("hidden");
    }, 3000);
}
    </script>

<script type="module">
    import { auth, db, doc, getDoc, updateDoc, query, collection, where, getDocs, increment, setDoc, onAuthStateChanged, limit, onSnapshot, getFirestore, serverTimestamp } from './script.js';
    
//document.getElementById("close-notification").addEventListener("click", function () {
  //  document.getElementById("notification-bar").style.display = "none";
//});

document.addEventListener("DOMContentLoaded", async function () {
    const ctx4 = document.getElementById("histogramChart").getContext("2d");


    try {
        const usersRef = collection(db, "users");
        const usersSnapshot = await getDocs(usersRef);
        const earningsData = [];
        const labels = [];

        usersSnapshot.forEach((doc) => {
            const userData = doc.data();
            if (userData.totalEarnings) {
                earningsData.push(userData.totalEarnings);
                labels.push(userData.firstName || "User"); // Default to "User" if no name
            }
        });

        if (earningsData.length === 0) {
            console.warn("No earnings data found in Firestore.");
        }

        new Chart(ctx4, {
            type: "bar",
            data: {
                labels,
                datasets: [{
                    label: "Earnings Distribution",
                    data: earningsData,
                    backgroundColor: "#673AB7"
                }]
            },
            options: { responsive: true }
        });

    } catch (error) {
        console.error("Error fetching earnings data:", error);
    }
});

    
  document.addEventListener("contextmenu", function (event) {
    event.preventDefault(); // Disable right-click
  });

  document.addEventListener("keydown", function (event) {
    if (event.ctrlKey && (event.key === "u" || event.key === "U")) {
      event.preventDefault(); // Disable "View Source" (Ctrl + U)
    }
    if (event.ctrlKey && event.shiftKey && event.key === "I") {
      event.preventDefault(); // Disable DevTools (Ctrl + Shift + I)
    }
    if (event.ctrlKey && event.shiftKey && event.key === "J") {
      event.preventDefault(); // Disable DevTools (Ctrl + Shift + J)
    }
    if (event.ctrlKey && event.key === "S") {
      event.preventDefault(); // Disable Save (Ctrl + S)
    }
    if (event.ctrlKey && event.key === "P") {
      event.preventDefault(); // Disable Print (Ctrl + P)
    }
  });


</script>
</body>
</html>
