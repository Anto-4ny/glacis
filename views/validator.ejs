<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <title>Quantum Market || Validator</title>
    <meta name="description" content="Glacis offers an online earning platform where users make money by inviting others, helping verify new users, selling ebooks, advertising, and more.">
    <meta property="og:title" content="Glacis">
    <meta property="og:description" content="Join Glacis to earn money through various online opportunities including referrals, verifications, and advertising.">
    <meta property="og:image" content="/images/glacis-logo.jpg">
    <meta property="og:url" content="https://glacis.antocapteknologies.com">

    <!-- Use only one Font Awesome import -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
    
    <!-- Favicon -->
    <link rel="icon" href="images/quantum-market-logo.jpg" type="image/x-icon">
    
    <!-- Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
</head>

    <script type="module">
        import { ensureAuthenticated } from "./script.js";
        
        document.addEventListener("DOMContentLoaded", () => {
            ensureAuthenticated(); 
        });
    </script>   

<!-- Header -->
<header class="flex flex-col bg-gradient-to-r from-gray-900 via-gray-800 to-gray-100 shadow-lg fixed w-full top-0 z-50 border-b border-gray-300 h-28 px-6">
 
    <!-- Top Section with Icons (Hidden on Small Screens) -->
    <div class="hidden lg:flex items-center space-x-4 bg-white shadow-md rounded-full border border-gray-300 px-4 py-2 w-fit absolute right-6 top-0 mb-4">
        <button id="theme-toggle" class="text-yellow-500 text-xl hover:text-yellow-600 transition">
            <i class="fas fa-moon"></i>
        </button>
        <button id="language-toggle" class="text-blue-500 text-xl hover:text-blue-600 transition">
            <i class="fas fa-language"></i>
        </button>
        <button id="notification-bar" class="relative text-green-500 text-xl hover:text-green-600 transition">
            <i class="fas fa-bell"></i>
            <span class="absolute -top-1 -right-1 bg-red-600 text-white text-xs w-4 h-4 flex items-center justify-center rounded-full">3</span>
        </button>
    </div>
    
    
        <!-- Main Header Section -->
        <div class="flex items-center justify-between py-1">
            <a href="/dashboard" class="flex items-center space-x-3">
                <img id="logo" src="images/quantum-market-logo.jpg" alt="Logo" class="h-20 w-20 rounded-full shadow-md">                         
            </a>
    
           <!-- Desktop Navigation -->
    <nav class="hidden lg:flex space-x-8 bg-white px-10 py-3 shadow-md rounded-full border border-gray-300 mt-10">
        <a href="dashboard" class="text-gray-900 font-semibold hover:text-blue-500 transition duration-300">Dashboard</a>
        <a href="earnings" class="text-gray-900 font-semibold hover:text-blue-500 transition duration-300">Earnings</a>
        <a href="validator" class="text-gray-900 font-semibold hover:text-blue-500 transition duration-300">Validator</a>
        <a href="referral" class="text-gray-900 font-semibold hover:text-blue-500 transition duration-300">Referrals</a>
        <a href="withdraw" class="text-gray-900 font-semibold hover:text-blue-500 transition duration-300">Withdraw</a>
        <a href="videos" class="text-gray-900 font-semibold hover:text-blue-500 transition duration-300">Videos</a>
        <a href="help" class="text-gray-900 font-semibold hover:text-blue-500 transition duration-300">Help</a>
        <a href="profile" class="text-gray-900 font-semibold hover:text-blue-500 transition duration-300">Profile</a>
        <button id="logout-button" class="text-red-500 font-semibold hover:text-red-700 transition duration-300">Log Out</button>
    </nav>
    
    
            <!-- Mobile Navigation Icon -->
            <button id="hamburger-icon" class="text-gray-900 text-2xl lg:hidden">
                <i class="fas fa-bars"></i>
            </button>
        </div>
    </header>
    
    <!-- Overlay -->
    <div id="overlay" class="fixed inset-0 bg-black bg-opacity-30 hidden lg:hidden"></div>
    
    <!-- Mobile Navigation -->
    <nav id="mobile-nav" class="fixed left-0 top-0 h-full w-3/4 bg-white text-gray-900 shadow-2xl transform -translate-x-full transition-transform lg:hidden z-50 rounded-r-2xl">
        <div class="p-6 border-b flex justify-between items-center">
            <h3 class="text-xl font-semibold">Menu</h3>
            <button id="close-nav" class="text-gray-700 text-2xl"><i class="fas fa-times"></i></button>
        </div>
        <div class="p-6 flex flex-col space-y-4 text-lg">
            <a href="dashboard" class="flex items-center space-x-3 hover:text-blue-500">
                <i class="fas fa-tachometer-alt"></i><span>Dashboard</span>
            </a>
            <a href="earnings" class="flex items-center space-x-3 hover:text-blue-500">
                <i class="fas fa-dollar-sign"></i><span>Earnings</span>
            </a>
            <a href="validator" class="flex items-center space-x-3 hover:text-blue-500">
                <i class="fas fa-user-check"></i><span>Validator</span>
            </a>
            <a href="referral" class="flex items-center space-x-3 hover:text-blue-500">
                <i class="fas fa-user-friends"></i><span>Referrals</span>
            </a>
            <a href="withdraw" class="flex items-center space-x-3 hover:text-blue-500">
                <i class="fas fa-wallet"></i><span>Withdraw</span>
            </a>
            <a href="videos" class="flex items-center space-x-3 hover:text-blue-500">
                <i class="fas fa-info-circle"></i><span>Videos</span>
            </a>
            <a href="help" class="flex items-center space-x-3 hover:text-blue-500">
                <i class="fas fa-question-circle"></i><span>Help</span>
            </a>
            <a href="profile" class="flex items-center space-x-3 hover:text-blue-500">
                <i class="fas fa-user"></i><span>Profile</span>
            </a>
            <button id="logout-button" class="flex items-center space-x-3 text-red-500 hover:text-red-700">
                <i class="fas fa-sign-out-alt"></i><span>Log Out</span>
            </button>
        </div>
        
        <!-- Mobile Icons Section (Now inside the menu for small screens) -->
        <div class="p-6 border-t flex justify-around text-gray-700 text-xl bg-white shadow-md rounded-b-2xl">
            <button id="theme-toggle" class="text-yellow-500 hover:text-yellow-600 transition">
                <i class="fas fa-moon"></i>
            </button>
            <button id="language-toggle" class="text-blue-500 hover:text-blue-600 transition">
                <i class="fas fa-language"></i>
            </button>
            <button id="notification-bar" class="relative text-green-500 hover:text-green-600 transition">
                <i class="fas fa-bell"></i>
                <span class="absolute -top-1 -right-1 bg-red-600 text-white text-xs w-4 h-4 flex items-center justify-center rounded-full">3</span>
            </button>
        </div>
    </nav>

     <!-- Spacer for Other Items -->
     <div class="h-8 md:h-14 lg:h-8"></div>
        

<!-- Validator Registration Popup -->
<div id="validator-popup" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden">
    <div class="bg-white p-6 rounded-lg shadow-lg w-full max-w-md max-h-[90vh] overflow-y-auto mt-10">
        <h3 class="text-xl font-bold text-gray-800 mb-4">Become a Validator</h3>
        <p class="text-gray-600 mb-2">To become a validator, pay a one-time registration fee of <strong>$40</strong>.</p>
        <p class="text-gray-800 font-semibold">Send payment to:</p>

        <!-- Wallet Addresses -->
        <div class="space-y-2">
            <div class="flex justify-between items-center bg-gray-100 p-2 rounded-lg">
                <span class="text-sm text-gray-700">Binance: <strong id="binance-wallet">821693759</strong></span>
                <button onclick="copyToClipboard('binance-wallet')" class="bg-blue-500 text-white px-2 py-1 rounded">Copy</button>
            </div>
        </div>
        <div id="message-boxx"></div>

        <h3 class="text-lg font-semibold mt-6">Submit Payment Details</h3>
        <p class="text-gray-600 text-sm mb-4">Submit your payment details for verification:</p>

        <!-- Payment Submission Form -->
        <form id="payment-form" class="space-y-4">
            <div>
                <label class="block text-sm font-medium text-gray-700">Transaction Hash (TXID)</label>
                <input type="text" id="txid" placeholder="Enter TXID" class="w-full p-3 border rounded-lg focus:ring focus:ring-blue-300 transition">
            </div>
   
            <!--<div>
                <label class="block text-sm font-medium text-gray-700">Upload Transaction Screenshot</label>
                <input type="file" id="screenshot" accept="image/*" class="w-full p-3 border rounded-lg focus:ring focus:ring-blue-300 transition">
            </div>-->

            <div>
                <label class="block text-sm font-medium text-gray-700">Wallet Address Used</label>
                <input type="text" id="wallet-used" placeholder="Enter Wallet Address" class="w-full p-3 border rounded-lg focus:ring focus:ring-blue-300 transition">
            </div>

            <div>
                <label class="block text-sm font-medium text-gray-700">Date & Time of Payment</label>
                <input type="datetime-local" id="payment-date" class="w-full p-3 border rounded-lg focus:ring focus:ring-blue-300 transition">
            </div>
            <div id="message-box"></div>
            <button id="pay-validator-btn" class="mt-4 bg-green-600 text-white py-2 px-4 rounded-lg w-full hover:bg-green-700 transition">
                Submit Payment
            </button>
        </form>
    </div>
</div>
<script>
    function copyToClipboard(id) {
        const text = document.getElementById(id).textContent;
        const messageBoxx = document.getElementById("message-boxx");

        navigator.clipboard.writeText(text)
            .then(() => {
                messageBoxx.innerHTML = `<p class="bg-green-100 text-green-700 p-2 rounded-md text-center">✅ Wallet Address Copied!</p>`;
            })
            .catch(() => {
                messageBoxx.innerHTML = `<p class="bg-red-100 text-red-700 p-2 rounded-md text-center">❌ Failed to copy address.</p>`;
            });

        // Clear message after 3 seconds
        setTimeout(() => {
            messageBoxx.innerHTML = "";
        }, 3000);
    }
</script>

 <!-- Spacer for Other Items -->
 <div class="h-8 md:h-14 lg:h-8"></div>
        

<body class="bg-gray-100 font-sans mt-20">
<div id="message-box"></div>
<section id="validators" class="p-6 bg-gray-100 min-h-screen">
    <!-- Validators Page Title -->
    <div class="bg-gradient-to-r from-gray-900 via-gray-800 to-gray-900 shadow-2xl rounded-2xl p-8 mb-8 text-center">
        <h2 class="text-3xl text-white font-extrabold tracking-wide uppercase py-4 shadow-lg rounded-xl 
                   bg-gradient-to-r from-green-500 to-blue-600 inline-block px-6">
            Validators Panel
        </h2>
    </div>

    <!-- Validate Payment Panel -->
    <div class="bg-white shadow-lg rounded-lg p-6 mt-8">
        <h3 class="text-lg font-semibold text-gray-800 mb-4">Validate Payment</h3>
        <p class="text-gray-600 mb-4">Review and approve/reject payments.</p>
          
    <!-- Earnings Tracker for Validators -->
    <div class="bg-white shadow-lg rounded-lg p-6 mt-8">
        <h3 class="text-lg font-semibold text-gray-800 mb-4">Earnings Tracker</h3>
        <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
            <div class="bg-green-100 p-4 rounded-lg text-center">
                <h4 class="text-lg font-semibold text-gray-700">Total Validations</h4>
                <p id="total-validations" class="text-2xl font-bold text-green-700">0</p>
            </div>
            <div class="bg-blue-100 p-4 rounded-lg text-center">
                <h4 class="text-lg font-semibold text-gray-700">Total Earnings</h4>
                <p id="total-earnings" class="text-2xl font-bold text-blue-700">$0</p>
            </div>
            <div class="bg-gray-100 p-4 rounded-lg text-center">
                <h4 class="text-lg font-semibold text-gray-700">Pending Earnings</h4>
                <p id="pending-earnings" class="text-2xl font-bold text-gray-600">$0</p>
            </div>
        </div>
    </div>

   <!-- Pending Transactions Table -->
<div class="bg-white shadow-2xl rounded-2xl p-6 overflow-hidden">
    <h3 class="text-xl font-bold text-gray-900 mb-4">Pending Transactions</h3>
    
    <div class="overflow-x-auto">
        <table class="w-full min-w-[800px] border-collapse rounded-lg">
            <thead>
                <tr class="bg-gradient-to-r from-indigo-500 to-blue-500 text-white">
                    <th class="p-4 border border-gray-300">Username</th>
                    <th class="p-4 border border-gray-300">Amount Paid</th>
                    <th class="p-4 border border-gray-300">Transaction ID</th>
                    <th class="p-4 border border-gray-300">Time Submitted</th>
                    <th class="p-4 border border-gray-300">Validation Status</th>
                    <th class="p-4 border border-gray-300">Actions</th>
                </tr>
            </thead>
            <tbody id="pending-transactions" class="bg-gray-50 divide-y divide-gray-200">
                <!-- Transactions dynamically inserted here -->
            </tbody>
        </table>
    </div>
</div>

    
    <!-- Validation History -->
<div class="bg-white shadow-lg rounded-lg p-6 mt-8 overflow-x-auto">
    <h3 class="text-lg font-semibold text-gray-800 mb-4">Validation History</h3>
    <p class="text-gray-600 mb-4">View previously validated payments world wide.</p>
    <div class="w-full overflow-x-auto">
        <table class="w-full min-w-max border-collapse border border-gray-300">
            <thead>
                <tr class="bg-gray-200">
                    <th class="p-3 border">Username</th>
                    <th class="p-3 border">Amount</th>
                    <th class="p-3 border">Transaction ID</th>
                    <th class="p-3 border">Status</th>
                    <th class="p-3 border">Date</th>
                </tr>
            </thead>
            <tbody id="validation-history">
                <!-- Approved transactions will be inserted here -->
            </tbody>
        </table>
    </div>
</div>
</section>


<script type="module">
    import { auth, db, doc, getDoc, updateDoc, query, collection, where, getDocs, increment, setDoc, onAuthStateChanged, limit, onSnapshot, getFirestore, serverTimestamp } from './script.js';
    
    document.addEventListener("DOMContentLoaded", async () => {
        const validatorPopup = document.getElementById("validator-popup");
        const payBtn = document.getElementById("pay-validator-btn");
        const transactionTable = document.getElementById("pending-transactions");
        const earningsDisplay = document.getElementById("total-earnings");
        const txidInput = document.getElementById("txid");
        const walletUsedInput = document.getElementById("wallet-used");
        const paymentDateInput = document.getElementById("payment-date");
        const messageBox = document.getElementById("message-box"); // UI message box
        const pendingEarningsElem = document.getElementById("pending-earnings");
        
        let user;
    
        onAuthStateChanged(auth, async (currentUser) => {
            if (currentUser) {
                user = currentUser;
                await updateUserToValidator();
                checkValidatorStatus();
                loadValidatorDashboard();
                fetchTotalValidations();
                loadValidationHistory();
            } else {
                window.location.href = "/";
            }
        });
    
        function displayMessage(type, text) {
            const color = type === "success" ? "green" : "red";
            messageBox.innerHTML = `<div class="message" style="color: ${color}; font-weight: bold;">${text}</div>`;
            setTimeout(() => {
                messageBox.innerHTML = "";
            }, 5000);
        }
    
        //CHECKING IF THE USER IS FULLY VALIDATED
        async function updateUserToValidator() {
        const userRef = doc(db, "users", user.uid);
        const userSnap = await getDoc(userRef);
    
        if (userSnap.exists()) {
            const userData = userSnap.data();
    
            // Check if the user's payment has been approved
            const paymentsQuery = query(collection(db, "payments"), 
                                        where("email", "==", user.email), 
                                        where("status", "==", "approved"));
            const paymentsSnap = await getDocs(paymentsQuery);
    
            if (!userData.isValidator && !paymentsSnap.empty) {
                // ✅ Update user to become a validator
                await updateDoc(userRef, {
                    isValidator: true
                });
    
                console.log("✅ User is now a validator.");
            }
        }
    }
    
    
        //HIDING AND DISPLAYING OF POP-UP CONTAINER
        async function checkValidatorStatus() {
        const paymentQuery = query(
            collection(db, "payments"),
            where("email", "==", user.email),
            where("status", "==", "approved"),
            limit(1)
        );
    
        const paymentSnap = await getDocs(paymentQuery);
    
        if (!paymentSnap.empty) {
            console.log("✅ Payment is approved. Hiding pop-up.");
            validatorPopup.classList.add("hidden");
            loadAssignedTransactions();
        } else {
            console.log("❌ Payment not approved yet. Showing pop-up.");
            validatorPopup.classList.remove("hidden");
        }
    }
    
    // RUN CHECK ON PAGE LOAD
    document.addEventListener("DOMContentLoaded", checkValidatorStatus);
    
    
    // CLICKING SUBMISSION BUTTON IN VALIDATORS PAGE
    payBtn.addEventListener("click", async (event) => {
        event.preventDefault();
    
        if (!user) return displayMessage("error", "❌ Not authenticated!");
    
        const txid = txidInput.value.trim();
        const walletUsed = walletUsedInput.value.trim();
        const paymentDate = paymentDateInput.value;
    
        if (!txid || !walletUsed || !paymentDate) {
            return displayMessage("error", "❌ Please fill in all fields.");
        }
    
        try {
            // Disable form inputs & button to prevent multiple submissions
            payBtn.disabled = true;
            txidInput.disabled = true;
            walletUsedInput.disabled = true;
            paymentDateInput.disabled = true;
    
            // Fetch all validators from USERS collection
            const validatorQuery = query(collection(db, "users"), where("isValidator", "==", true));
            const validatorSnap = await getDocs(validatorQuery);
            let validatorList = [];
    
            validatorSnap.forEach(doc => {
                validatorList.push(doc.id);
            });
    
            // Randomly pick one validator
            validatorList = validatorList.sort(() => 0.5 - Math.random()).slice(0, 1);
    
            if (validatorList.length < 1) {
                return displayMessage("error", "❌ Not enough validators available.");
            }
    
            const chosenValidator = validatorList[0];
    
            // Store payment details in Firestore
            const paymentRef = doc(collection(db, "payments"));
            await setDoc(paymentRef, {
                email: user.email,
                txid,
                walletAddress: walletUsed,
                paymentDate,
                assignedValidators: [chosenValidator], // Assigned validator
                approvals: [],
                status: "pending",
                timestamp: serverTimestamp()
            });
    
            // ✅ Update user document to set isValidator = true (Pending Approval)
            await updateDoc(doc(db, "users", user.uid), {
                isValidator: true
            });
    
            displayMessage("success", "✅ Payment submitted. Waiting for approval.");
    
            // 🔹 Call Cloud Function to send email to validator
            //await fetch("https://YOUR_CLOUD_FUNCTION_URL/sendApprovalEmail", {
              //  method: "POST",
               // headers: {
              //      "Content-Type": "application/json"
              //  },
              //  body: JSON.stringify({ validatorEmail: chosenValidator, txid })
          //  });
    
        } catch (error) {
            console.error("Error submitting payment:", error);
    
            // Enable the form again for retry
            payBtn.disabled = false;
            txidInput.disabled = false;
            walletUsedInput.disabled = false;
            paymentDateInput.disabled = false;
    
            displayMessage("error", "❌ Submission failed. Try again.");
        }
    });
    
     // LOADING THE ASSIGNED TRANSACTIONS
     async function loadAssignedTransactions() {
        const q = query(
            collection(db, "payments"),
            where("status", "==", "pending"),
            //where("paymentapproved", "==", "pending"),
            where("assignedValidators", "array-contains", user.uid)
        );
    
        const querySnapshot = await getDocs(q);
        let transactionHTML = "";
    
        querySnapshot.forEach((docSnap) => {
            const data = docSnap.data();
            const paymentId = docSnap.id;
    
            let paymentTime = "N/A";
            if (data.timestamp?.seconds) {
                paymentTime = new Date(data.timestamp.seconds * 1000).toLocaleString();
            }
    
            transactionHTML += `
                <tr id="transaction-${paymentId}" class="hover:bg-gray-100 transition duration-200">
                    <td class="p-4 border border-gray-300">${data.email}</td>
                    <td class="p-4 border border-gray-300 text-green-600 font-semibold">$${data.amountPaid}</td>
                    <td class="p-4 border border-gray-300">${data.txid}</td>
                    <td class="p-4 border border-gray-300">${paymentTime}</td>
                    <td class="p-4 border border-gray-300 text-center">
                        <span class="px-3 py-1 rounded-full text-white text-xs ${data.approvals.length >= 1 ? 'bg-green-500' : 'bg-red-500'}">
                            ${data.approvals.length >= 1 ? "Approved" : "Pending"}
                        </span>
                    </td>
                    <td class="p-4 border border-gray-300 text-center">
                        <button class="approve-btn px-4 py-2 bg-indigo-600 text-white font-bold rounded-lg hover:bg-indigo-700 transition"
                            data-id="${paymentId}">
                            Approve
                        </button>
                    </td>
                </tr>
            `;
        });
    
        document.getElementById("pending-transactions").innerHTML = transactionHTML;
    
        transactionTable.innerHTML = transactionHTML;
    
         // Attach event listeners to approval buttons
        document.querySelectorAll(".approve-btn").forEach(button => {
            button.addEventListener("click", () => approvePayment(button.dataset.id));
        });
    }
    
    // APPROVING PAYMENTS
    async function approvePayment(paymentId) {
        const button = document.querySelector(`[data-id='${paymentId}']`);
        if (!button) return;
    
        button.textContent = "Approving...";
        button.disabled = true;
    
        const paymentRef = doc(db, "payments", paymentId);
        const paymentDoc = await getDoc(paymentRef);
    
        if (!paymentDoc.exists()) return;
        const paymentData = paymentDoc.data();
    
        if (paymentData.approvals.includes(user.uid)) {
            button.textContent = "Already Approved";
            return;
        }
    
        // Update approvals and set payment to "approved" if at least 1 validator approves
        const updatedApprovals = [...paymentData.approvals, user.uid];
        const paymentStatus = "approved"; // Since only 1 validator is needed
    
        await updateDoc(paymentRef, {
            approvals: updatedApprovals,
            status: paymentStatus
        });
    
        // Increment total earnings for the validator (add $1)
        const validatorRef = doc(db, "users", user.uid);
        await updateDoc(validatorRef, {
            totalEarnings: increment(1)
        });
    
        // Hide pop-up after approval
        validatorPopup.classList.add("hidden");
    
        button.textContent = "Approved";
        button.classList.add("bg-gray-400");
    
        // Remove from pending transactions table
        const row = button.closest("tr");
        if (row) row.remove();
    
        // Add to validation history dynamically
        const historyTable = document.getElementById("validation-history");
        let paymentTime = "N/A";
        if (paymentData.timestamp?.seconds) {
            paymentTime = new Date(paymentData.timestamp.seconds * 1000).toLocaleString();
        }
    
        historyTable.innerHTML += `
            <tr>
                <td class="p-3 border">${paymentData.email}</td>
                <td class="p-3 border">$${paymentData.amountPaid}</td>
                <td class="p-3 border">${paymentData.txid}</td>
                <td class="p-3 border text-green-600 font-bold">Approved</td>
                <td class="p-3 border">${paymentTime}</td>
            </tr>
        `;
    
        // Reload validator's earnings display
        loadValidatorDashboard();
    }
    
    // LOAD VALIDATOR DASHBOARD
    async function loadValidatorDashboard() {
        const userRef = doc(db, "users", user.uid);
        const userSnap = await getDoc(userRef);
        if (!userSnap.exists()) return;
    
        earningsDisplay.textContent = `$${userSnap.data().totalEarnings || 0}`;
    }
    
    // FETCH TOTAL VALIDATIONS DONE BY THE LOGGED-IN VALIDATOR
    async function fetchTotalValidations() {
        if (!user) return;
    
        const totalValidationsDisplay = document.getElementById("total-validations");
    
        const approvalsQuery = query(
            collection(db, "payments"),
            where("approvals", "array-contains", user.email),
            where("status", "==", "approved") // Only count approved payments
        );
    
        const approvalsSnap = await getDocs(approvalsQuery);
        const totalValidations = approvalsSnap.size; // Count total documents
    
        // Update UI
        totalValidationsDisplay.textContent = totalValidations;
    }
    
    // LOAD VALIDATION HISTORY AND TOTAL VALIDATIONS
    async function loadValidationHistory() {
    const historyTable = document.getElementById("validation-history");

    const user = auth.currentUser;
    if (!user) return;

    // Query only the approved payments assigned to the logged-in user
    const q = query(
        collection(db, "payments"),
        where("status", "==", "approved"),  // ✅ Fixed status field
        where("assignedValidators", "array-contains", user.uid) // ✅ Show only validations for this user
    );

    // Listen for real-time updates
    onSnapshot(q, async (querySnapshot) => {
        let historyHTML = "";

        if (querySnapshot.empty) {
            historyHTML = `
                <tr>
                    <td colspan="5" class="p-3 text-center text-gray-500">No approved payments found for you.</td>
                </tr>
            `;
        } else {
            querySnapshot.forEach((docSnap) => {
                const data = docSnap.data();
                let paymentTime = "N/A";

                if (data.timestamp?.seconds) {
                    paymentTime = new Date(data.timestamp.seconds * 1000).toLocaleString();
                }

                historyHTML += `
                    <tr>
                        <td class="p-3 border">${data.email}</td>
                        <td class="p-3 border">$${data.amountPaid || 40}</td>
                        <td class="p-3 border">${data.txid}</td>
                        <td class="p-3 border text-green-600 font-bold">Approved</td>
                        <td class="p-3 border">${paymentTime}</td>
                    </tr>
                `;
            });
        }

        historyTable.innerHTML = historyHTML;

        // Fetch the total validations after loading the history
        fetchTotalValidations();
    });
}

});

    
    </script>        
 
<!-- Referral Section -->
<div class="bg-white shadow-xl rounded-2xl p-8 mt-6 max-w-3xl mx-auto border border-gray-200">
    <h3 class="text-xl font-bold text-gray-900 mb-4">Your Referral Link</h3>
    
    <div class="flex items-center space-x-4 bg-gray-100 p-3 rounded-lg shadow-inner">
        <p id="referral-link" class="flex-grow text-gray-800 bg-white px-4 py-2 rounded-md border border-gray-300 overflow-hidden text-ellipsis whitespace-nowrap">
            Your Referral Link Here
        </p>
        <button id="copy-link-button" class="px-4 py-2 bg-gradient-to-r from-blue-500 to-purple-600 text-white font-semibold rounded-lg shadow-md hover:scale-105 transition-transform duration-300">
            Copy
        </button>
  
            <a id="whatsapp-share-button" target="_blank" class="px-4 py-2 bg-green-500 text-white rounded-lg shadow-md hover:bg-green-600 transition duration-300">
            <i class="fab fa-whatsapp text-lg"></i>
        </a>
    </div>
</div>

<p id="copy-message" class="hidden text-sm"></p>

</section>

<footer class="bg-gray-900 text-white text-center py-4">
    <p class="copyright-text text-sm">
        &copy; 2025 <span class="font-bold">Quantum Market</span>. All rights reserved.
    </p>
    <p class="text-xs mt-1">
        Designed by 
        <a href="https://antocapteknologies.com" class="text-blue-400 hover:text-blue-300 font-semibold" target="_blank">
            Antocap Teknologies
        </a>
    </p>
</footer>    
  
<script type ="module" src="https://www.gstatic.com/firebasejs/11.4.0/firebase-app.js"></script>
<script type ="module" src="https://www.gstatic.com/firebasejs/11.4.0/firebase-analytics.js"></script>
<script type ="module" src="https://www.gstatic.com/firebasejs/11.4.0/firebase-auth.js"></script>
<script type ="module" src="https://www.gstatic.com/firebasejs/11.4.0/firebase-firestore.js"></script>
<script type ="module" src="https://www.gstatic.com/firebasejs/11.4.0/firebase-storage.js"></script>

<script type="module" src="referral.js"></script>
<script type="module" src="script.js"></script>

  <script>

document.addEventListener("contextmenu", function (event) {
    event.preventDefault(); // Disable right-click
  });

  document.addEventListener("keydown", function (event) {
    if (event.ctrlKey && (event.key === "u" || event.key === "U")) {
      event.preventDefault(); // Disable "View Source" (Ctrl + U)
    }
    if (event.ctrlKey && event.shiftKey && event.key === "I") {
      event.preventDefault(); // Disable DevTools (Ctrl + Shift + I)
    }
    if (event.ctrlKey && event.shiftKey && event.key === "J") {
      event.preventDefault(); // Disable DevTools (Ctrl + Shift + J)
    }
    if (event.ctrlKey && event.key === "S") {
      event.preventDefault(); // Disable Save (Ctrl + S)
    }
    if (event.ctrlKey && event.key === "P") {
      event.preventDefault(); // Disable Print (Ctrl + P)
    }
  });

</script>
</body>
</html>
